#!/usr/bin/env bash

[ -z "$1" ] && { printf '%s\n' "Clustername required"; exit 0; }

cluster=${1}
service=${cluster}
aws_account_id="$(yq '.services.aws.account-id' $ONEPATH/config.yaml)"
aws_region="$(yq '.services.aws.region' $ONEPATH/config.yaml)"

# Remind on runtime security enabled
printf '%s\n' "Runtime Security enabled?"
sleep 5

mkdir -p ${ONEPATH}/.ecsfg

# Patch task role
printf '%s\n' "Patching task role..."
task_arn=$(aws ecs list-tasks \
             --cluster ${cluster} | \
             jq -r '.taskArns[]')
definition_arn=$(aws ecs describe-tasks \
                   --cluster ${cluster} \
                   --task ${task_arn} | \
                   jq -r '.tasks[].taskDefinitionArn')
task_role_arn=$(aws ecs describe-task-definition \
                  --task-definition ${definition_arn} | \
                  jq -r '.taskDefinition.taskRoleArn')
task_role_name=${task_role_arn##*/}
printf '%s\n' "  Role name: ${task_role_name}"

printf '%s\n' "  Creating role policy."
cat <<EOF >${ONEPATH}/.ecsfg/ecsfg-iam-policy.json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "ssm:GetParameter"
            ],
            "Resource": "arn:aws:ssm:${aws_region}:${aws_account_id}:parameter/V1CS/*"
        }
    ]
}
EOF

policy_arn=$(aws iam create-policy \
               --policy-name ${task_role_name} \
               --policy-document file://${ONEPATH}/.ecsfg/ecsfg-iam-policy.json | \
               jq -r '.Policy.Arn')

printf '%s\n' "  Attaching role policy."
aws iam attach-role-policy \
  --role-name ${task_role_name} \
  --policy-arn ${policy_arn}

# Get task definition
printf '%s\n' "Getting task definition..."
task_definition_arn=$(aws ecs describe-tasks \
                        --cluster ${cluster} \
                        --tasks ${task_arn} | \
                        jq -r '.tasks[].taskDefinitionArn')
task_definition_name=${task_definition_arn##*/}
aws ecs describe-task-definition \
  --task-definition ${task_definition_name} | \
  jq '.taskDefinition' > ${ONEPATH}/.ecsfg/task-definition.json

# Are we contained?
# findmnt /
# TARGET SOURCE         FSTYPE OPTIONS
# /      /dev/nvme0n1p1 xfs    rw,noatime,seclabel,attr2,inode64,logbufs=8,logbsize=32k,sunit=1024,swidth=1024,noquota

# findmnt /
# TARGET SOURCE  FSTYPE  OPTIONS
# /      overlay overlay rw,relatime,seclabel,lowerdir=/var/lib/docker/overlay2/l/LF5OWVJWMQ6KS5U64OBSH4BTSZ:/var/lib/docker/overlay2

# get home with: docker inspect pgoc-0.2.1 | jq -r '.[0].Mounts[] | select(.Source | endswith("workdir")) | .Source'
# /home/ec2-user/environment/workdir
if [ "$(findmnt -o SOURCE -J / | jq -r '.filesystems[0].source')" == "overlay" ]; then
  # Contained
  container_name=$(docker ps --format "{{.Names}}" -f name=pgoc)
  home_dir=$(docker inspect ${container_name} | jq -r '.[0].Mounts[] | select(.Source | endswith("workdir")) | .Source')
  ecsfg_path=${home_dir}/playground-one
else
  # Uncontained
  ecsfg_path=${ONEPATH}
fi

# Get latest image version of taskdef patcher
dockerhub_repo=trendmicrocloudone
dockerhub_image=ecs-taskdef-patcher
taskdef_tag=$(curl -Ls --fail "https://hub.docker.com/v2/repositories/${dockerhub_repo}/${dockerhub_image}/tags/?page_size=1000" | \
	jq '.results | .[] | .name' -r | \
	sed 's/latest//' | \
	sort --version-sort | \
	tail -n 1)

# Patch task definition
printf '%s\n' "  Patching task definition..."
docker run -ti \
  -v ${ecsfg_path}/.ecsfg:/mnt/input \
  -v ${ecsfg_path}/.ecsfg:/mnt/output \
  trendmicrocloudone/ecs-taskdef-patcher:${taskdef_tag} \
  -i /mnt/input/task-definition.json \
  -o /mnt/output/task-definition-patched.json
printf '%s\n' "  Patched task definition written to .ecsfg"

# Create new task revision
printf '%s\n' "Create new task revision"
task_new_revision=$(aws ecs register-task-definition \
  --cli-input-json file://${ONEPATH}/.ecsfg/task-definition-patched.json | \
  jq -r '.taskDefinition.revision')

# Update Service to use new revision and force redeployment
printf '%s\n' "Update Service to use new revision and force redeployment"
aws ecs update-service \
  --cluster ${cluster} \
  --service ${service} \
  --task-definition ${task_definition_name%%:*}:${task_new_revision} \
  --force-new-deployment | \
  jq -r '.service.taskDefinition'
