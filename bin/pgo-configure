#!/usr/bin/env bash

. $ONEPATH/bin/playground-helpers.sh

if [ -f ${ONEPATH}/config.yaml ]; then
  if [ $(yq '.services[] | select(.name=="aws") | .region' ${ONEPATH}/config.yaml) ]; then
    printf '%s\n' "Making backup copy of existing configuration"
    cp ${ONEPATH}/config.yaml ${ONEPATH}/config.yaml.bak
    printf '%s\n\n' "Creating config.yaml from template"
    cp ${ONEPATH}/templates/config.yaml.template ${ONEPATH}/config.yaml
  fi
else
  cp ${ONEPATH}/templates/config.yaml.template ${ONEPATH}/config.yaml
fi

bold=$(tput bold)
normal=$(tput sgr0)
yellow=$(tput setaf 3)
blue=$(tput setaf 4)
red=$(tput setaf 1)
green=$(tput setaf 2)

function update_pgo_config() {
  printf '\n%s\n' "${bold}${blue}Section: Playground One${normal}"
  printf '%s\n' "Please set/update your Playground One configuration"

  # key_desc="Access IPs/CIDRs"
  # read -p "${key_desc} [${pgo_access_ip}]: " TEMP
  # if [[ ! -z "${TEMP}" ]]; then
  #   pgo_access_ip=${TEMP}
  # fi
  # if [[ "${pgo_access_ip}" =~ ^\[\"[0-9\.\,\/\"[:space:]]+\"\]$ ]]; then
  #   target_val=${pgo_access_ip} \
  #     yq -i '.services.playground-one.access-ip = env(target_val)' ${ONEPATH}/config.yaml
  # else
  #   echo "Error: Invalid ${key_desc} input."
  #   exit 0
  # fi

  key_desc="Initialize Terraform Configurations?"
  read -p "${key_desc} [${pgo_initialize}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_initialize=${TEMP}
  fi
  if [[ "${pgo_initialize}" =~ ^true|false$ ]]; then
    target_val=${pgo_initialize} \
      yq -i '.services.initialize = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="PGO Environment Name"
  read -p "${key_desc} [${environment_name}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    environment_name=${TEMP}
  fi
  if [[ "${environment_name}" =~ ^[0-9a-z\-]+$ && ${#environment_name} -le 12 ]]; then
    target_val=${environment_name} \
      yq -i '.services.environment_name = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  ##
  ## Access IPs/CIDRs
  ##
  key_desc="Access IPs/CIDRs"
  pgo_access_ip=${pgo_access_ip//[\[\]\"]/}
  read -p "${key_desc} [${pgo_access_ip}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_access_ip=${TEMP}
  fi

  if is_ec2 ; then
    key_desc="Public IP accessing Cloud9"
    pgo_access_ip=${pgo_access_ip//[\[\]\"]/}
    read -p "${key_desc} [${pgo_access_ip}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      pgo_access_ip=${pgo_access_ip},${TEMP}
    fi
  fi

  n='([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
  m='([0-9]|[12][0-9]|3[012])'
  cidr_list='['
  for cidr in $(echo ${pgo_access_ip} | tr ',' ' ')
  do
    # Input matches "pub", query public IP
    if [[ "${cidr}" == "pub" ]]; then
      cidr=$(curl -s ifconfig.me && echo)'/32'
      # printf 'Public IP/CIDR %s\n' "$cidr"
    fi
    # Input matches IP, append /0 or /32
    if [[ "${cidr}" =~ ^$n(\.$n){3}$ ]]; then
      [[ "${cidr}" == "0.0.0.0" ]] && cidr='0.0.0.0/0' || cidr=$cidr'/32'
    fi
    # Test for valid CIDR
    if [[ "${cidr}" =~ ^$n(\.$n){3}/$m$ ]]; then
      cidr_list=$cidr_list'"'$cidr'",'
    else
      printf 'Error: "%s" is not a valid CIDR\n' "$cidr"
      exit 0
    fi
  done
  pgo_access_ip=${cidr_list::-1}']'
  # CIDR list correct?
  if [[ "${pgo_access_ip}" =~ ^\[\"[0-9\.\,\/\"[:space:]]+\"\]$ ]]; then
    printf 'Public IP(s)/CIDR(s): %s\n' "$pgo_access_ip"
    target_val=${pgo_access_ip} \
      yq -i '.services.playground-one.access-ip = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  ##
  ## Booleans
  ##
  key_desc="Running in Product Experience?"
  read -p "${key_desc} [${pgo_px}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_px=${TEMP}
  fi
  if [[ "${pgo_px}" =~ ^true|false$ ]]; then
    target_val=${pgo_px} \
      yq -i '.services.playground-one.px = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi
}

function update_aws_config() {
  printf '\n%s\n' "${bold}${blue}Section: AWS${normal}"
  printf '%s\n' "Please set/update your AWS configuration"

  ##
  ## AWS
  ##
  key_desc="Account ID"
  read -p "${key_desc} [${aws_account_id}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    aws_account_id=${TEMP}
  fi
  if [[ "${aws_account_id}" =~ ^[0-9]+$ && "${aws_account_id#0}" -gt 0 ]]; then
    target_val=${aws_account_id} \
      yq -i '.services.aws.account-id = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="Region Name"
  read -p "${key_desc} [${aws_region}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    aws_region=${TEMP}
  fi
  if [[ "${aws_region}" =~ ^[0-9a-z\-]+$ ]]; then
    target_val=${aws_region} \
      yq -i '.services.aws.region = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  ##
  ## PGO User
  ##
  key_desc="Use PGO User?"
  read -p "${key_desc} [${aws_pgo_user_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    aws_pgo_user_enabled=${TEMP}
  fi
  if [[ "${aws_pgo_user_enabled}" =~ ^true|false$ ]]; then
    target_val=${aws_pgo_user_enabled} \
      yq -i '.services.aws.pgo_user_enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  if ${aws_pgo_user_enabled} ; then
    aws_pgo_user_access_key="$(yq '.services.aws.pgo_user_access_key' $ONEPATH/config.yaml)"
    aws_pgo_user_secret_key="$(yq '.services.aws.pgo_user_secret_key' $ONEPATH/config.yaml)"
    [[ "${aws_pgo_user_access_key}" = "null" || "${aws_pgo_user_access_key}" = "" || "${aws_pgo_user_enabled}" = "false" ]] && aws_pgo_user_access_key=""
    [[ "${aws_pgo_user_secret_key}" = "null" || "${aws_pgo_user_secret_key}" = "" || "${aws_pgo_user_enabled}" = "false" ]] && aws_pgo_user_secret_key=""

    key_desc="PGO User Access Key"
    read -p "${key_desc} [${aws_pgo_user_access_key}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      aws_pgo_user_access_key=${TEMP}
    fi
    if [[ "${aws_pgo_user_access_key}" =~ ^[0-9A-Z]+$ || "${aws_pgo_user_access_key}" == "null" ]]; then
      target_val=${aws_pgo_user_access_key} \
        yq -i '.services.aws.pgo_user_access_key = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="PGO User Secret Key"
    read -p "${key_desc} [${aws_pgo_user_secret_key:0:10}...]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      aws_pgo_user_secret_key=${TEMP}
    fi
    if [[ "${aws_pgo_user_secret_key}" =~ ^[0-9a-zA-Z\/+]+$ || "${aws_pgo_user_secret_key}" == "null" ]]; then
      target_val=${aws_pgo_user_secret_key} \
        yq -i '.services.aws.pgo_user_secret_key = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi
  fi

  key_desc="AD - create PGO Active Directory?"
  read -p "${key_desc} [${pgo_active_directory}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_active_directory=${TEMP}
  fi
  if [[ "${pgo_active_directory}" =~ ^true|false$ ]]; then
    target_val=${pgo_active_directory} \
      yq -i '.services.aws.active-directory = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="MAD - create Managed Active Directory?"
  read -p "${key_desc} [${pgo_managed_active_directory}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_managed_active_directory=${TEMP}
  fi
  if [[ "${pgo_managed_active_directory}" =~ ^true|false$ ]]; then
    target_val=${pgo_managed_active_directory} \
      yq -i '.services.aws.managed-active-directory = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="SG - create Service Gateway?"
  read -p "${key_desc} [${pgo_service_gateway}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_service_gateway=${TEMP}
  fi
  if [[ "${pgo_service_gateway}" =~ ^true|false$ ]]; then
    target_val=${pgo_service_gateway} \
      yq -i '.services.aws.service-gateway = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="PAC - create Private Access Gateway?"
  read -p "${key_desc} [${pgo_private_access_gateway}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_private_access_gateway=${TEMP}
  fi
  if [[ "${pgo_private_access_gateway}" =~ ^true|false$ ]]; then
    target_val=${pgo_private_access_gateway} \
      yq -i '.services.aws.private-access-gateway = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="VNS - create Virtual Network Sensor?"
  read -p "${key_desc} [${pgo_virtual_network_sensor_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_virtual_network_sensor_enabled=${TEMP}
  fi
  if [[ "${pgo_virtual_network_sensor_enabled}" =~ ^true|false$ ]]; then
    target_val=${pgo_virtual_network_sensor_enabled} \
      yq -i '.services.aws.virtual-network-sensor.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  if ${pgo_virtual_network_sensor_enabled} ; then
    pgo_virtual_network_sensor_token="$(yq '.services.aws.virtual-network-sensor.token' $ONEPATH/config.yaml)"
    [[ "${pgo_virtual_network_sensor_token}" = "null" || "${pgo_virtual_network_sensor_token}" = "" ]] && pgo_virtual_network_sensor_token="token"

    key_desc="VNS - Virtual Network Sensor Token"
    read -p "${key_desc} [${pgo_virtual_network_sensor_token:0:10}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      pgo_virtual_network_sensor_token=${TEMP}
    fi
    if [[ "${pgo_virtual_network_sensor_token}" =~ ^ey[0-9a-zA-Z]+\.ey[0-9a-zA-Z\.\_-]+$ ]]; then
      target_val=${pgo_virtual_network_sensor_token} \
        yq -i '.services.aws.virtual-network-sensor.token = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi
  fi

  key_desc="DDI - create Deep Discovery Inspector?"
  read -p "${key_desc} [${pgo_deep_discovery_inspector_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_deep_discovery_inspector_enabled=${TEMP}
  fi
  if [[ "${pgo_deep_discovery_inspector_enabled}" =~ ^true|false$ ]]; then
    target_val=${pgo_deep_discovery_inspector_enabled} \
      yq -i '.services.aws.deep-discovery-inspector.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="EC2 - create Linux EC2?"
  read -p "${key_desc} [${pgo_ec2_create_linux}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_ec2_create_linux=${TEMP}
  fi
  if [[ "${pgo_ec2_create_linux}" =~ ^true|false$ ]]; then
    target_val=${pgo_ec2_create_linux} \
      yq -i '.services.playground-one.ec2.create-linux = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="EC2 - create Windows EC2?"
  read -p "${key_desc} [${pgo_ec2_create_windows}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_ec2_create_windows=${TEMP}
  fi
  if [[ "${pgo_ec2_create_windows}" =~ ^true|false$ ]]; then
    target_val=${pgo_ec2_create_windows} \
      yq -i '.services.playground-one.ec2.create-windows = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi
}

function update_azure_config() {
  printf '\n%s\n' "${bold}${blue}Section: Azure${normal}"
  printf '%s\n' "Please set/update your Azure configuration"

  ##
  ## Azure
  ##
  key_desc="Enable Azure?"
  read -p "${key_desc} [${azure_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    azure_enabled=${TEMP}
  fi
  if [[ "${azure_enabled}" =~ ^true|false$ ]]; then
    target_val=${azure_enabled} \
      yq -i '.services.azure.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  if ${azure_enabled} ; then
    key_desc="Subscription ID"
    read -p "${key_desc} [${azure_subscription_id:0:10}...]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      azure_subscription_id=${TEMP}
    fi
    if [[ "${azure_subscription_id}" =~ ^[0-9a-z\-]+$ ]]; then
      target_val=${azure_subscription_id} \
        yq -i '.services.azure.subscription-id = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="Region Name"
    read -p "${key_desc} [${azure_region}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      azure_region=${TEMP}
    fi
    if [[ "${azure_region}" =~ ^[0-9a-z\-]+$ ]]; then
      target_val=${azure_region} \
        yq -i '.services.azure.region = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="VM - create Linux EC2?"
    read -p "${key_desc} [${pgo_azvm_create_linux}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      pgo_azvm_create_linux=${TEMP}
    fi
    if [[ "${pgo_azvm_create_linux}" =~ ^true|false$ ]]; then
      target_val=${pgo_azvm_create_linux} \
        yq -i '.services.playground-one.azvm.create-linux = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi
  fi
}

function update_vision_one_config() {
  printf '\n%s\n' "${bold}${blue}Section: Vision One${normal}"
  printf '%s\n' "Please set/update your Vision One configuration"

  ##
  ## Vision One
  ##
  key_desc="API Key"
  read -p "${key_desc} [${vision_one_api_key:0:10}...]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    vision_one_api_key=${TEMP}
  fi
  if [[ "${vision_one_api_key}" =~ ^ey[0-9a-zA-Z]+\.ey[0-9a-zA-Z\.\_-]+$ ]]; then
    target_val=${vision_one_api_key} \
      yq -i '.services.vision-one.api-key = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  key_desc="Region Name"
  read -p "${key_desc} [${vision_one_region}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    vision_one_region=${TEMP}
  fi
  if [[ "${vision_one_region}" =~ ^[0-9a-z\-]+$ ]]; then
    target_val=${vision_one_region} \
      yq -i '.services.vision-one.region = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  ##
  ## Vision One Attack Surface Risk Management
  ##
  key_desc="ASRM - Create Predictive Attack Path(s)?"
  read -p "${key_desc} [${vision_one_asrm_create_attackpath}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    vision_one_asrm_create_attackpath=${TEMP}
  fi
  if [[ "${vision_one_asrm_create_attackpath}" =~ ^true|false$ ]]; then
    target_val=${vision_one_asrm_create_attackpath} \
      yq -i '.services.vision-one.asrm.create-attackpath = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  ##
  ## Vision One Container Security
  ##
  key_desc="Enable Container Security?"
  read -p "${key_desc} [${vision_one_cs_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    vision_one_cs_enabled=${TEMP}
  fi
  if [[ "${vision_one_cs_enabled}" =~ ^true|false$ ]]; then
    target_val=${vision_one_cs_enabled} \
      yq -i '.services.vision-one.container-security.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  if ${vision_one_cs_enabled} ; then
    key_desc="Container Security Policy Name"
    read -p "${key_desc} [${vision_one_cs_policy}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      vision_one_cs_policy=${TEMP}
    fi
    if [[ "${vision_one_cs_policy}" =~ ^[0-9a-zA-Z_\-]+$ ]]; then
      target_val=${vision_one_cs_policy} \
        yq -i '.services.vision-one.container-security.policy = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="Container Security Enable Policy Operator?"
    read -p "${key_desc} [${vision_one_cs_policy_operator}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      vision_one_cs_policy_operator=${TEMP}
    fi
    if [[ "${vision_one_cs_policy_operator}" =~ ^true|false$ ]]; then
      target_val=${vision_one_cs_policy_operator} \
        yq -i '.services.vision-one.container-security.policy-operator.enabled = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="Container Security Cluster Group ID"
    read -p "${key_desc} [${vision_one_cs_group_id}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      vision_one_cs_group_id=${TEMP}
    fi
    if [[ "${vision_one_cs_group_id}" =~ ^[0-9a-zA-Z_\-]+$ ]]; then
      target_val=${vision_one_cs_group_id} \
        yq -i '.services.vision-one.container-security.group-id = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi
  else
    printf '%s\n' "Skipping Vision One Container Security configuration"
  fi
}

function update_deep_security_config() {
  printf '\n%s\n' "${bold}${blue}Section: Deep Security (on-prem)${normal}"
  printf '%s\n' "Please set/update your Deep Security configuration"

  ##
  ## Deep Security
  ##
  key_desc="Enable Deep Security?"
  read -p "${key_desc} [${deep_security_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    deep_security_enabled=${TEMP}
  fi
  if [[ "${deep_security_enabled}" =~ ^true|false$ ]]; then
    target_val=${deep_security_enabled} \
      yq -i '.services.deep-security.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  if ${deep_security_enabled} ; then
    key_desc="License"
    read -p "${key_desc} [${deep_security_license:0:10}...]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      deep_security_license=${TEMP}
    fi
    if [[ "${deep_security_license}" =~ ^[0-9A-Z\-]+$ ]]; then
      target_val=${deep_security_license} \
        yq -i '.services.deep-security.license = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="Username"
    read -p "${key_desc} [${deep_security_username}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      deep_security_username=${TEMP}
    fi
    if [[ "${deep_security_username}" =~ ^[a-zA-Z]+$ ]]; then
      target_val=${deep_security_username} \
        yq -i '.services.deep-security.username = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="Password"
    read -p "${key_desc} [${deep_security_password}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      deep_security_password=${TEMP}
    fi
    if [[ "${deep_security_password}" =~ ^[0-9a-zA-Z]+$ ]]; then
      target_val=${deep_security_password} \
        yq -i '.services.deep-security.password = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi
  else
    printf '%s\n' "Skipping Deep Security configuration"
  fi
}

function update_workload_security_config() {
  printf '\n%s\n' "${bold}${blue}Section: Workload Security${normal}"
  printf '%s\n' "Please set/update your Workload Security configuration"

  ##
  ## Workload Security
  ##
  key_desc="Enable Workload Security?"
  read -p "${key_desc} [${workload_security_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    workload_security_enabled=${TEMP}
  fi
  if [[ "${workload_security_enabled}" =~ ^true|false$ ]]; then
    target_val=${workload_security_enabled} \
      yq -i '.services.workload-security.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  if ${workload_security_enabled} ; then
    key_desc="Region"
    read -p "${key_desc} [${workload_security_region:0:10}...]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      workload_security_region=${TEMP}
    fi
    if [[ "${workload_security_region}" =~ ^[0-9a-z\-]+$ ]]; then
      target_val=${workload_security_region} \
        yq -i '.services.workload-security.region = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="Tenant ID"
    read -p "${key_desc} [${workload_security_tenant_id:0:10}...]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      workload_security_tenant_id=${TEMP}
    fi
    if [[ "${workload_security_tenant_id}" =~ ^[0-9A-Z\-]+$ ]]; then
      target_val=${workload_security_tenant_id} \
        yq -i '.services.workload-security.tenant-id = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="Token"
    read -p "${key_desc} [${workload_security_token:0:10}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      workload_security_token=${TEMP}
    fi
    if [[ "${workload_security_token}" =~ ^[0-9A-Z\-]+$ ]]; then
      target_val=${workload_security_token} \
        yq -i '.services.workload-security.token = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi

    key_desc="API Key"
    read -p "${key_desc} [${workload_security_api_key:0:10}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      workload_security_api_key=${TEMP}
    fi
    if [[ "${workload_security_api_key}" =~ ^[0-9A-Z\-]+:[0-9A-Z\-]+:[0-9a-zA-Z\/\=]+$ ]]; then
      target_val=${workload_security_api_key} \
        yq -i '.services.workload-security.api-key = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi
  else
    printf '%s\n' "Skipping Workload Security configuration"
  fi
}

# function update_vision_one_config() {
#   printf '\n%s\n' "Please set/update your Server & Workload Protection configuration"

#   ##
#   ## Server & Workload Protection
#   ##
#   key_desc="Server & Workload Protection tenant ID"
#   read -p "${key_desc} [${vision_one_server_tenant_id:0:9}...]: " TEMP
#   if [[ ! -z "${TEMP}" ]]; then
#     vision_one_server_tenant_id=${TEMP}
#   fi
#   if [ ! -z "${vision_one_server_tenant_id}" ]; then
#     if [[ "${vision_one_server_tenant_id}" =~ ^[0-9A-Z\-]+\-[0-9A-Z\-]+\-[0-9A-Z\-]+\-[0-9A-Z\-]+\-[0-9A-Z\-]+$ ]]; then
#       target_val=${vision_one_server_tenant_id}"" \
#         yq -i '.services.vision-one.server-workload-protection.tenant-id = env(target_val)' ${ONEPATH}/config.yaml
#     else
#       echo "Error: Invalid ${key_desc} input."
#       exit 0
#     fi
#   else
#     printf '%s\n' "Skipping Server & Workload Protection configuration"
#   fi

#   if [ ! -z "${vision_one_server_tenant_id}" ]; then
#     key_desc="Server & Workload Protection token"
#     read -p "${key_desc} [${vision_one_server_token:0:9}...]: " TEMP
#     if [[ ! -z "${TEMP}" ]]; then
#       vision_one_server_token=${TEMP}
#     fi
#     if [ ! -z "${vision_one_server_token}" ]; then
#       if [[ "${vision_one_server_token}" =~ ^[0-9A-Z\-]+\-[0-9A-Z\-]+\-[0-9A-Z\-]+\-[0-9A-Z\-]+\-[0-9A-Z\-]+$ ]]; then
#         target_val=${vision_one_server_token} \
#           yq -i '.services.vision-one.server-workload-protection.token = env(target_val)' ${ONEPATH}/config.yaml
#       else
#         echo "Error: Invalid ${key_desc} input."
#         exit 0
#       fi
#     fi
#   fi

#   if [ ! -z "${vision_one_server_tenant_id}" ]; then
#     key_desc="Server & Workload Protection policy ID"
#     read -p "${key_desc} [${vision_one_server_policy_id}]: " TEMP
#     if [[ ! -z "${TEMP}" ]]; then
#       vision_one_server_policy_id=${TEMP}
#     fi
#     if [ ! -z "${vision_one_server_policy_id}" ]; then
#       if [[ "${vision_one_server_policy_id}" =~ ^[0-9]+$ && "${vision_one_server_policy_id}" -ge 0 ]]; then
#         target_val=${vision_one_server_policy_id} \
#           yq -i '.services.vision-one.server-workload-protection.policy = env(target_val)' ${ONEPATH}/config.yaml
#       else
#         echo "Error: Invalid ${key_desc} input."
#         exit 0
#       fi
#     fi
#   fi
# }

function update_integrations_config() {
  printf '\n%s\n' "${bold}${blue}Section: Kubernetes Deployments${normal}"
  printf '%s\n' "Please set/update your Integrations configuration"

  ##
  ## Calico
  ##
  key_desc="Deploy Calico?"
  read -p "${key_desc} [${integrations_calico_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    integrations_calico_enabled=${TEMP}
  fi
  if [[ "${integrations_calico_enabled}" =~ ^true|false$ ]]; then
    target_val=${integrations_calico_enabled} \
      yq -i '.services.integrations.calico.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  ##
  ## Prometheus & Grafana
  ##
  key_desc="Deploy Prometheus & Grafana?"
  read -p "${key_desc} [${integrations_prometheus_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    integrations_prometheus_enabled=${TEMP}
  fi
  if [[ "${integrations_prometheus_enabled}" =~ ^true|false$ ]]; then
    target_val=${integrations_prometheus_enabled} \
      yq -i '.services.integrations.prometheus.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  if ${integrations_prometheus_enabled} ; then
    key_desc="Grafana Administrator Password"
    read -p "${key_desc} [${integrations_prometheus_grafana_password}]: " TEMP
    if [[ ! -z "${TEMP}" ]]; then
      integrations_prometheus_grafana_password=${TEMP}
    fi
    if [[ "${integrations_prometheus_grafana_password}" =~ ^[0-9a-zA-Z\:]+$ ]]; then
      target_val=${integrations_prometheus_grafana_password} \
        yq -i '.services.integrations.prometheus.grafana-password = env(target_val)' ${ONEPATH}/config.yaml
    else
      echo "Error: Invalid ${key_desc} input."
      exit 0
    fi
  # else
  #   printf '%s\n' "Skipping Prometheus & Grafana configuration"
  fi

  ##
  ## Trivy
  ##
  key_desc="Deploy Trivy?"
  read -p "${key_desc} [${integrations_trivy_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    integrations_trivy_enabled=${TEMP}
  fi
  if [[ "${integrations_trivy_enabled}" =~ ^true|false$ ]]; then
    target_val=${integrations_trivy_enabled} \
      yq -i '.services.integrations.trivy.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  ##
  ## Istio
  ##
  key_desc="Deploy Istio?"
  read -p "${key_desc} [${integrations_istio_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    integrations_istio_enabled=${TEMP}
  fi
  if [[ "${integrations_istio_enabled}" =~ ^true|false$ ]]; then
    target_val=${integrations_istio_enabled} \
      yq -i '.services.integrations.istio.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  ##
  ## MetalLB
  ##
  key_desc="Deploy MetalLB?"
  read -p "${key_desc} [${integrations_metallb_enabled}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    integrations_metallb_enabled=${TEMP}
  fi
  if [[ "${integrations_metallb_enabled}" =~ ^true|false$ ]]; then
    target_val=${integrations_metallb_enabled} \
      yq -i '.services.integrations.metallb.enabled = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi
}

# Overrides for in development features
function stickies() {
  echo
  # yq -i '.services.vision-one.container-security.enabled = false' ${ONEPATH}/config.yaml
  # yq -i '.services.integrations.calico.enabled = false' ${ONEPATH}/config.yaml
}

get_config

update_pgo_config

# We dont want to change AWS config while having deployments
if [[ ! -f ${ONEPATH}/awsone/2-network/.pgo.nw.lock && \
      ! -f ${ONEPATH}/awsone/2-network/.pgo.ec2.lock && \
      ! -f ${ONEPATH}/awsone/2-network/.pgo.eks-ec2.lock && \
      ! -f ${ONEPATH}/awsone/2-network/.pgo.eks-fg.lock && \
      ! -f ${ONEPATH}/awsone/2-network/.pgo.ecs-ec2.lock && \
      ! -f ${ONEPATH}/awsone/2-network/.pgo.ecs-fg.lock ]] ; then
  update_aws_config
else
  printf '%s\n' "Skipping AWS configuration."
fi
update_azure_config
update_vision_one_config
# update_vision_one_config
update_integrations_config
update_deep_security_config
update_workload_security_config

stickies

printf '%s\n' "Applying configuration..."
[ "${pgo_initialize}" == "true" ] && pgo --init all || pgo --tfvars all
# printf '%s\n' "If you changed anything run: pgo --init all"
printf '\n%s\n' "Done."
