#!/bin/bash

set -e

[ -f $ONEPATH/banner.txt ] && cat $ONEPATH/banner.txt

# Source helpers
if [ -f $ONEPATH/bin/playground-helpers.sh ]; then
    .  $ONEPATH/bin/playground-helpers.sh
else
    curl -fsSL https://raw.githubusercontent.com/mawinkler/playground-one/main/bin/playground-helpers.sh -o /tmp/playground-helpers.sh
    . /tmp/playground-helpers.sh
fi

# Check for dialog
DIALOG_INSTALLED=$(apt -qq list dialog 2>/dev/null)
if [[ "$DIALOG_INSTALLED" != *"installed"* ]]; then
    sudo apt update
    sudo apt install -y dialog
fi

# Bootstrap
if [ ! -f "$ONEPATH/.pghome" ]; then
    curl -fsSL https://raw.githubusercontent.com/mawinkler/playground-one/main/bin/bootstrap.sh -o /tmp/bootstrap.sh
    . /tmp/bootstrap.sh ${CURRENT_PATH}

    curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
    unzip /tmp/awscliv2.zip -d /tmp
    sudo /tmp/aws/install --update
    rm -Rf /tmp/aws /tmp/awscliv2.zip

    curl -fsSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
    sudo mv /tmp/eksctl /usr/local/bin
    rm -Rf /tmp/eksctl

    exit 0
fi


function lock() {

  touch ${ONEPATH}/awsone/2-network/.pgo.$1.lock
}

function unlock() {

  rm -f ${ONEPATH}/awsone/2-network/.pgo.$1.lock
}

function check_cdr_for_containers() {

  # Checking if XDR for Containers is deployed
  tf_state_vpc=$(terraform state list | grep "module.vpc.aws_vpc.vpc")
  if [[ ! -z "${tf_state_vpc}" ]] ; then
    vpc_id=$(terraform output -raw vpc_id)
    subnets_createdby=$(aws ec2 describe-subnets | \
      jq -r --arg vpc_id "$vpc_id" '.Subnets[] |
        select(.VpcId==$vpc_id) | .Tags[] | select(.Key=="CreatedBy") | .Value' | head -n1)
    if [ "${subnets_createdby}" == "VisionOneXdrForContainer" ] ; then
      printf '%s\n' "XDR for Containers is deployed in VPC ${vpc_id}"
      return
    fi
  fi
  false
}

function check_network() {

  # Checking if XDR for Containers is deployed and update tfvars
  if check_cdr_for_containers ; then
    xdr_for_containers=true
  else
    xdr_for_containers=false
  fi
  aws_account_id=${aws_account_id} \
  aws_region=${aws_region} \
  aws_environment=${aws_environment} \
  pgo_access_ip=${pgo_access_ip} \
  xdr_for_containers=${xdr_for_containers} \
  ONEPATH=${ONEPATH} \
    envsubst <$ONEPATH/templates/terraform-2-network.tfvars >$ONEPATH/awsone/2-network/terraform.tfvars

  # Check locks
  if [[ -f ${ONEPATH}/awsone/2-network/.pgo.ec2.lock ]] ; then
    echo Destroy EC2 configuration first
    exit 0
  fi
  if [[ -f ${ONEPATH}/awsone/2-network/.pgo.eks.lock ]] ; then
    echo Destroy EKS configuration first
    exit 0
  fi
  if [[ -f ${ONEPATH}/awsone/2-network/.pgo.ecs.lock ]] ; then
    echo Destroy ECS configuration first
    exit 0
  fi
}

#######################################
# Initializes Terraform and creates
# variables.tfvars
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function init() {

  case $1 in
    nw|network|all)
      printf '%s\n' "Create terraform.tfvars for network"
      if check_cdr_for_containers ; then
        xdr_for_containers=true
      else
        xdr_for_containers=false
      fi
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip} \
      xdr_for_containers=${xdr_for_containers} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-2-network.tfvars >$ONEPATH/awsone/2-network/terraform.tfvars
      
      cd ${ONEPATH}/awsone/2-network
      terraform init
      ;;&
    ec2|all)
      printf '%s\n' "Create terraform.tfvars for instances"
      aws_region=${aws_region} \
      pgo_access_ip=${pgo_access_ip} \
      aws_environment=${aws_environment} \
      pgo_ec2_create_linux=${pgo_ec2_create_linux} \
      pgo_ec2_create_windows=${pgo_ec2_create_windows} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-3-instances.tfvars >$ONEPATH/awsone/3-instances/terraform.tfvars

      cd ${ONEPATH}/awsone/3-instances
      terraform init
      ;;&
    eks|all)
      printf '%s\n' "Create terraform.tfvars for cluster-eks"
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_eks_create_fargate_profile=${pgo_eks_create_fargate_profile} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-4-cluster-eks.tfvars >$ONEPATH/awsone/4-cluster-eks/terraform.tfvars
      printf '%s\n' "Create terraform.tfvars for cluster-eks deployments"
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip//[\[\]\" ]/} \
      cloud_one_api_key=${cloud_one_api_key} \
      cloud_one_region=${cloud_one_region} \
      cloud_one_instance=${cloud_one_instance} \
      cloud_one_cs_policy_id=${cloud_one_cs_policy_id} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-8-cluster-eks-deployments.tfvars >$ONEPATH/awsone/8-cluster-eks-deployments/terraform.tfvars

      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform init
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform init
      ;;&
    ecs|all)
      printf '%s\n' "Create terraform.tfvars for cluster-ecs"
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip} \
      pgo_ecs_create_ec2=${pgo_ecs_create_ec2} \
      pgo_ecs_create_fargate=${pgo_ecs_create_fargate} \
      vision_one_server_tenant_id=${vision_one_server_tenant_id} \
      vision_one_server_token=${vision_one_server_token} \
      vision_one_server_policy_id=${vision_one_server_policy_id} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-5-cluster-ecs.tfvars >$ONEPATH/awsone/5-cluster-ecs/terraform.tfvars

      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform init
      ;;&
    scenarios|all)
      printf '%s\n' "Create terraform.tfvars for scenario deployments"
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip//[\[\]\" ]/} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-7-scenarios.tfvars >$ONEPATH/awsone/7-scenarios/terraform.tfvars

      cd ${ONEPATH}/awsone/7-scenarios
      terraform init
      ;;&
    kind|all)
      printf '%s\n' "Create terraform.tfvars for cluster-eks"
      aws_environment=${aws_environment} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-6-cluster-kind.tfvars >$ONEPATH/awsone/6-cluster-kind/terraform.tfvars
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform init
      ;;
  esac
  printf '%s\n' "ðŸ’¬ Terraform terraform.tfvars dropped to configurations"
}

#######################################
# Applies a Terraform configuration
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function apply() {

  case $1 in
    nw|network|all)
      check_network
      cd ${ONEPATH}/awsone/2-network
      terraform apply -auto-approve
      ;;&
    ec2|all)
      lock ec2
      cd ${ONEPATH}/awsone/3-instances
      terraform apply -auto-approve
      printf '%s\n' "public_instance_password_srv1 = \"$(terraform output -raw public_instance_password_srv1)\""
      ;;&
    eks|all)
      lock eks
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform apply -auto-approve
      $(terraform output -raw update_local_context_command)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform apply -auto-approve
      ;;&
    ecs|all)
      lock ecs
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform apply -auto-approve
      ;;&
    scenarios|all)
      lock eks
      cd ${ONEPATH}/awsone/7-scenarios
      terraform apply -auto-approve
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform apply -auto-approve
      ;;
  esac
}

#######################################
# Destroys a Terraform configuration
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function destroy() {

  case $1 in
    nw|network)
      check_network
      cd ${ONEPATH}/awsone/2-network
      terraform destroy -auto-approve
      ;;
    ec2)
      cd ${ONEPATH}/awsone/3-instances
      terraform destroy -auto-approve
      unlock ec2
      ;;
    eks)
      cd ${ONEPATH}/awsone/7-scenarios
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform destroy -auto-approve
      unlock eks
      ;;
    ecs)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform destroy -auto-approve
      unlock ecs
      ;;
    scenarios)
      cd ${ONEPATH}/awsone/7-scenarios
      terraform destroy -auto-approve
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform destroy -auto-approve
      ;;
    all)
      cd ${ONEPATH}/awsone/3-instances
      terraform destroy -auto-approve
      unlock ec2
      cd ${ONEPATH}/awsone/7-scenarios
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform destroy -auto-approve
      unlock eks
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform destroy -auto-approve
      unlock ecs
      ;;
  esac
}

#######################################
# Lists Terraform outputs
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function output() {

  case $1 in
    nw|network|all)
      cd ${ONEPATH}/awsone/2-network
      terraform output
      ;;&
    ec2|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform output
      printf '%s\n' "public_instance_password_srv1 = \"$(terraform output -raw public_instance_password_srv1)\""
      ;;&
    eks|all)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform output
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform output
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform output
      ;;&
    scenarios|all)
      cd ${ONEPATH}/awsone/7-scenarios
      terraform output
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform output
      ;;
  esac
}

#######################################
# Shows a Terraform configuration state
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function state() {

  case $1 in
    nw|network|all)
      cd ${ONEPATH}/awsone/2-network
      terraform state list
      ;;&
    ec2|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform state list
      ;;&
    eks|all)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform state list
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform state list
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform state list
      ;;&
    scenarios|all)
      cd ${ONEPATH}/awsone/7-scenarios
      terraform state list
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform state list
      ;;
  esac
}

#######################################
# Shows a Terraform configuration full
# state
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function show() {

  case $1 in
    nw|network|all)
      cd ${ONEPATH}/awsone/2-network
      terraform show
      ;;&
    ec2|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform show
      ;;&
    eks|all)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform show
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform show
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform show
      ;;&
    scenarios|all)
      cd ${ONEPATH}/awsone/7-scenarios
      terraform show
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform show
      ;;
  esac
}

#######################################
# Validates a Terraform configuration
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function validate() {

  case $1 in
    nw|network|all)
      cd ${ONEPATH}/awsone/2-network
      terraform validate
      ;;&
    ec2|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform validate
      ;;&
    eks|all)
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform validate
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform validate
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform validate
      ;;&
    scenarios|all)
      cd ${ONEPATH}/awsone/7-scenarios
      terraform validate
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform validate
      ;;
  esac
}

function helpcmd() {

  printf '%s\n' "Usage: pgo -<command> <configuration> ..."
  printf '%s\n' ""
  printf '%s\n' "The available commands for execution are listed below."
  printf '%s\n' "The primary workflow commands are given first, followed by"
  printf '%s\n' "less common or more advanced commands."
  printf '%s\n' ""
  printf '%s\n' "Available configurations: vpc, nw, ec2, eks, ecs, scenarios"
  printf '%s\n' ""
  printf '%s\n' "Main commands:"
  printf '%s\n' "  -c --config   Set/update Playground One main configuration"
  printf '%s\n' "  -i --init     Prepare a configuration for other commands"
  printf '%s\n' "  -a --apply    Create of update infrastructure"
  printf '%s\n' "  -d --destroy  Destroy previously-created infrastructure"
  printf '%s\n' "  -o --output   Show output values"
  printf '%s\n' "  -s --state    Show the current state"
  printf '%s\n' "  -h --help     Show this help"
  printf '%s\n' ""
  printf '%s\n' "Other commands:"
  printf '%s\n' "  -S --show     Show advanced state"
  printf '%s\n' "  -v --validate Check whether the configuration is valid"
  printf '%s\n' ""
  printf '%s\n' "Available configurations:"
  printf '%s\n' "  nw            Network configuration"
  printf '%s\n' "  ec2           EC2 configuration"
  printf '%s\n' "  eks           EKS configuration"
  printf '%s\n' "  ecs           ECS configurations"
  printf '%s\n' "  scenarios     Scenario configurations"
  printf '%s\n' "  all           All configurations"
  printf '%s\n' ""
  printf '%s\n' "Examples:"
  printf '%s\n' "  pgo --apply nw"
  printf '%s\n' "  pgo --state all"
}

#######################################
# Main:
# Manages a AWS based V1 & C1
# demo environment
#######################################
[ -z "$1" ] && helpcmd

if [ -f ${ONEPATH}/config.yaml ]; then
  get_config
fi

TEMP=$(getopt -o ci:a:d:o:s:S:v:h --long config,init:,apply:,destroy:,output:,state:,show:,validate:,help -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$TEMP"

while true; do
  case "$1" in
    -c | --config ) pgo-configure; break ;;
    -i | --init ) init $2; shift 2 ;;
    -a | --apply ) apply $2; shift 2 ;;
    -d | --destroy ) destroy $2; shift 2 ;;
    -o | --output ) output $2; shift 2 ;;
    -s | --state ) state $2; shift 2 ;;
    -S | --show ) show $2; shift 2 ;;
    -v | --validate ) validate $2; shift 2 ;;
    -h | --help ) helpcmd; break ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done
