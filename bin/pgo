#!/bin/bash

set -e

# Source helpers
if [ -f $ONEPATH/bin/playground-helpers.sh ]; then
    .  $ONEPATH/bin/playground-helpers.sh
else
    curl -fsSL https://raw.githubusercontent.com/mawinkler/playground-one/main/bin/playground-helpers.sh -o /tmp/playground-helpers.sh
    . /tmp/playground-helpers.sh
fi

# Check for dialog
DIALOG_INSTALLED=$(apt -qq list dialog 2>/dev/null)
if [[ "$DIALOG_INSTALLED" != *"installed"* ]]; then
    sudo apt update
    sudo apt install -y dialog
fi

# Bootstrap
if [ ! -f "$ONEPATH/.pghome" ]; then
    curl -fsSL https://raw.githubusercontent.com/mawinkler/playground-one/main/bin/bootstrap.sh -o /tmp/bootstrap.sh
    . /tmp/bootstrap.sh ${CURRENT_PATH}

    curl -fsSL "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "/tmp/awscliv2.zip"
    unzip /tmp/awscliv2.zip -d /tmp
    sudo /tmp/aws/install --update
    rm -Rf /tmp/aws /tmp/awscliv2.zip

    curl -fsSL "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$(uname -s)_amd64.tar.gz" | tar xz -C /tmp
    sudo mv /tmp/eksctl /usr/local/bin
    rm -Rf /tmp/eksctl

    exit 0
fi

#######################################
# Reads the config.yaml
# Globals:
#   None
#######################################
# AWS
AWS_ACCOUNT_ID="$(yq '.services[] | select(.name=="aws") | .account_id' $ONEPATH/config.yaml)"
AWS_REGION="$(yq '.services[] | select(.name=="aws") | .region' $ONEPATH/config.yaml)"
AWS_ENVIRONMENT="$(yq '.services[] | select(.name=="aws") | .environment' $ONEPATH/config.yaml)"
[[ "${AWS_REGION}" = "null" || "${AWS_REGION}" = "" ]] && AWS_REGION="eu-central-1"
[[ "${AWS_ENVIRONMENT}" = "null" || "${AWS_ENVIRONMENT}" = "" ]] && AWS_ENVIRONMENT="playground-one"

# AWS One
ACCESS_IP="$(yq '.services[] | select(.name=="awsone") | .access_ip' $ONEPATH/config.yaml)"
INSTANCES_CREATE_LINUX="$(yq '.services[] | select(.name=="awsone") | .instances.create_linux' $ONEPATH/config.yaml)"
INSTANCES_CREATE_WINDOWS="$(yq '.services[] | select(.name=="awsone") | .instances.create_windows' $ONEPATH/config.yaml)"
[[ "${ACCESS_IP}" = "null" || "${ACCESS_IP}" = "" ]] && ACCESS_IP="0.0.0.0/0"
[[ "${INSTANCES_CREATE_LINUX}" = "null" || "${INSTANCES_CREATE_LINUX}" = "" ]] && INSTANCES_CREATE_LINUX=true
[[ "${INSTANCES_CREATE_WINDOWS}" = "null" || "${INSTANCES_CREATE_WINDOWS}" = "" ]] && INSTANCES_CREATE_WINDOWS=true

# Cluster EKS
EKS_CREATE_FARGATE_PROFILE="$(yq '.services[] | select(.name=="awsone") | .cluster-eks.create_fargate_profile' $ONEPATH/config.yaml)"
CLOUD_ONE_API_KEY="$(yq '.services[] | select(.name=="cloudone") | .api_key' $ONEPATH/config.yaml)"
CLOUD_ONE_REGION="$(yq '.services[] | select(.name=="cloudone") | .region' $ONEPATH/config.yaml)"
CLOUD_ONE_INSTANCE="$(yq '.services[] | select(.name=="cloudone") | .instance' $ONEPATH/config.yaml)"
[[ "${EKS_CREATE_FARGATE_PROFILE}" = "null" || "${EKS_CREATE_FARGATE_PROFILE}" = "" ]] && EKS_CREATE_FARGATE_PROFILE=true
[[ "${CLOUD_ONE_REGION}" = "null" || "${CLOUD_ONE_REGION}" = "" ]] && CLOUD_ONE_REGION="trend-us-1"
[[ "${CLOUD_ONE_INSTANCE}" = "null" || "${CLOUD_ONE_INSTANCE}" = "" ]] && CLOUD_ONE_INSTANCE="cloudone"

# Cluster ECS
ECS_CREATE_EC2="$(yq '.services[] | select(.name=="awsone") | .cluster-ecs.create_ec2' $ONEPATH/config.yaml)"
ECS_CREATE_FARGATE="$(yq '.services[] | select(.name=="awsone") | .cluster-ecs.create_fargate' $ONEPATH/config.yaml)"
[[ "${ECS_CREATE_EC2}" = "null" || "${ECS_CREATE_EC2}" = "" ]] && ECS_CREATE_EC2=true
[[ "${ECS_CREATE_FARGATE}" = "null" || "${ECS_CREATE_FARGATE}" = "" ]] && ECS_CREATE_FARGATE=true

# Workload Security
WS_TENANTID="$(yq '.services[] | select(.name=="workload-security") | .ws_tenant_id' $ONEPATH/config.yaml)"
WS_TOKEN="$(yq '.services[] | select(.name=="workload-security") | .ws_token' $ONEPATH/config.yaml)"
WS_POLICY="$(yq '.services[] | select(.name=="workload-security") | .ws_policy_id' $ONEPATH/config.yaml)"
[[ "${WS_TENANTID}" = "null" ]] && WS_TENANTID=""
[[ "${WS_TOKEN}" = "null" ]] && WS_TOKEN=""
[[ "${WS_POLICY}" = "null" ]] && WS_POLICY=0

# Container Security
CLOUD_ONE_POLICY_ID="$(yq '.services[] | select(.name=="container_security") | .policy_id' $ONEPATH/config.yaml)"
[[ "${CLOUD_ONE_POLICY_ID}" = "null" || "${CLOUD_ONE_POLICY_ID}" = "" ]] && CLOUD_ONE_POLICY_ID=""

#######################################
# Initializes Terraform and creates
# variables.tfvars
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function init() {

  case $1 in
    vpc|all)
      printf '%s\n' "Create terraform.tfvars for network"
      AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID} \
      AWS_REGION=${AWS_REGION} \
      AWS_ENVIRONMENT=${AWS_ENVIRONMENT} \
      ACCESS_IP=${ACCESS_IP} \
        envsubst <$ONEPATH/templates/terraform-2-network.tfvars >$ONEPATH/awsone/2-network/terraform.tfvars
      
      cd ${ONEPATH}/awsone/2-network
      terraform init
      ;;&
    ec2|all)
      printf '%s\n' "Create terraform.tfvars for instances"
      AWS_REGION=${AWS_REGION} \
      ACCESS_IP=${ACCESS_IP} \
      AWS_ENVIRONMENT=${AWS_ENVIRONMENT} \
      INSTANCES_CREATE_LINUX=${INSTANCES_CREATE_LINUX} \
      INSTANCES_CREATE_WINDOWS=${INSTANCES_CREATE_WINDOWS} \
        envsubst <$ONEPATH/templates/terraform-3-instances.tfvars >$ONEPATH/awsone/3-instances/terraform.tfvars

      cd ${ONEPATH}/awsone/3-instances
      terraform init
      ;;&
    eks|all)
      printf '%s\n' "Create terraform.tfvars for cluster-eks"
      AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID} \
      AWS_REGION=${AWS_REGION} \
      AWS_ENVIRONMENT=${AWS_ENVIRONMENT} \
      ACCESS_IP=${ACCESS_IP} \
      EKS_CREATE_FARGATE_PROFILE=${EKS_CREATE_FARGATE_PROFILE} \
        envsubst <$ONEPATH/templates/terraform-4-cluster-eks.tfvars >$ONEPATH/awsone/4-cluster-eks/terraform.tfvars
      printf '%s\n' "Create terraform.tfvars for cluster-eks deployments"
      AWS_ENVIRONMENT=${AWS_ENVIRONMENT} \
      CLOUD_ONE_API_KEY=${CLOUD_ONE_API_KEY} \
      CLOUD_ONE_REGION=${CLOUD_ONE_REGION} \
      CLOUD_ONE_INSTANCE=${CLOUD_ONE_INSTANCE} \
      CLOUD_ONE_POLICY_ID=${CLOUD_ONE_POLICY_ID} \
        envsubst <$ONEPATH/templates/terraform-8-cluster-eks-deployments.tfvars >$ONEPATH/awsone/8-cluster-eks-deployments/terraform.tfvars

      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform init
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform init
      ;;&
    ecs|all)
      printf '%s\n' "Create terraform.tfvars for cluster-ecs"
      AWS_ACCOUNT_ID=${AWS_ACCOUNT_ID} \
      AWS_REGION=${AWS_REGION} \
      AWS_ENVIRONMENT=${AWS_ENVIRONMENT} \
      ACCESS_IP=${ACCESS_IP} \
      ECS_CREATE_EC2=${ECS_CREATE_EC2} \
      ECS_CREATE_FARGATE=${ECS_CREATE_FARGATE} \
      WS_TENANTID=${WS_TENANTID} \
      WS_TOKEN=${WS_TOKEN} \
      WS_POLICY=${WS_POLICY} \
        envsubst <$ONEPATH/templates/terraform-5-cluster-ecs.tfvars >$ONEPATH/awsone/5-cluster-ecs/terraform.tfvars

      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform init
      ;;
  esac
  printf '%s\n' "ðŸ’¬ Terraform terraform.tfvars dropped to configurations"
}

#######################################
# Applies a Terraform configuration
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function apply() {

  case $1 in
    vpc|all)
      cd ${ONEPATH}/awsone/2-network
      terraform apply -auto-approve
      ;;&
    ec2|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform apply -auto-approve
      ;;&
    eks|all)
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform apply -auto-approve
      $(terraform output -raw update_local_context_command)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform apply -auto-approve
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform apply -auto-approve
      ;;
  esac
}

#######################################
# Destroys a Terraform configuration
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function destroy() {

  case $1 in
    vpc)
      cd ${ONEPATH}/awsone/2-network
      terraform destroy -auto-approve
      ;;
    ec2)
      cd ${ONEPATH}/awsone/3-instances
      terraform destroy -auto-approve
      ;;
    eks)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform destroy -auto-approve
      ;;
    ecs)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform destroy -auto-approve
      ;;
    all)
      cd ${ONEPATH}/awsone/3-instances
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform destroy -auto-approve
      cd ${ONEPATH}/awsone/2-network
      terraform destroy -auto-approve
      ;;
  esac
}

#######################################
# Lists Terraform outputs
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function output() {

  case $1 in
    vpc|all)
      cd ${ONEPATH}/awsone/2-network
      terraform output
      ;;&
    ec2|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform output
      printf '%s\n' "public_instance_password_srv1 = \"$(terraform output -raw public_instance_password_srv1)\""
      ;;&
    eks|all)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform output
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform output
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform output
      ;;
  esac
}

#######################################
# Shows a Terraform configuration state
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function state() {

  case $1 in
    vpc|all)
      cd ${ONEPATH}/awsone/2-network
      terraform state list
      ;;&
    ec2|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform state list
      ;;&
    eks|all)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform state list
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform state list
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform state list
      ;;
  esac
}

#######################################
# Shows a Terraform configuration full
# state
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function show() {

  case $1 in
    vpc|all)
      cd ${ONEPATH}/awsone/2-network
      terraform show
      ;;&
    ec2|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform show
      ;;&
    eks|all)
      cd ${ONEPATH}/awsone/8-cluster-eks-deployments
      terraform show
      cd ${ONEPATH}/awsone/4-cluster-eks
      terraform show
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform show
      ;;
  esac
}

function helpcmd() {

  printf '%s\n' "Usage: pgo -<command> <configuration> ..."
  printf '%s\n' ""
  printf '%s\n' "The available commands for execution are listed below."
  printf '%s\n' "The primary workflow commands are given first, followed by"
  printf '%s\n' "less common or more advanced commands."
  printf '%s\n' ""
  printf '%s\n' "Main commands:"
  printf '%s\n' "  -i --init     Prepare a configuration for other commands"
  printf '%s\n' "  -a --apply    Create of update infrastructure"
  printf '%s\n' "  -d --destroy  Destroy previously-created infrastructure"
  printf '%s\n' "  -o --output   Show output values"
  printf '%s\n' "  -s --state    Show the current state"
  printf '%s\n' "  -h --help     Show this help"
  printf '%s\n' ""
  printf '%s\n' "Other commands:"
  printf '%s\n' "  -S --show     Show advanced state"
  printf '%s\n' ""
  printf '%s\n' "Available configurations:"
  printf '%s\n' "  vpc           VPC configuration"
  printf '%s\n' "  ec2           EC2 configuration"
  printf '%s\n' "  eks           EKS configuration"
  printf '%s\n' "  ecs           ECS configurations"
  printf '%s\n' "  all           All configurations"
  printf '%s\n' ""
  printf '%s\n' "Examples:"
  printf '%s\n' "  pgo --apply vpc"
  printf '%s\n' "  pgo --state all"
}

#######################################
# Main:
# Manages a AWS based V1 & C1
# demo environment
#######################################
TEMP=$(getopt -o i:a:d:o:s:S:h --long init:apply:,destroy:,output:,state:,show:,help -- "$@")
if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

eval set -- "$TEMP"

while true; do
  case "$1" in
    -i | --init ) init $2; shift 2;;
    -a | --apply ) apply $2; shift 2;;
    -d | --destroy ) destroy $2; shift 2;;
    -o | --output ) output $2; shift 2 ;;
    -s | --state ) state $2; shift 2 ;;
    -S | --show ) show $2; shift 2 ;;
    -h | --help ) helpcmd; break ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done
