#!/usr/bin/env bash

set -e

[ -f $ONEPATH/banner.txt ] && cat $ONEPATH/banner.txt

# Source helpers
if [ -f $ONEPATH/bin/playground-helpers.sh ]; then
  .  $ONEPATH/bin/playground-helpers.sh
else
  curl -fsSL https://raw.githubusercontent.com/mawinkler/playground-one/main/bin/playground-helpers.sh -o /tmp/playground-helpers.sh
  . /tmp/playground-helpers.sh
fi

# Check for dialog
if is_linux; then
  DIALOG_INSTALLED=$(apt -qq list dialog 2>/dev/null)
  if [[ "$DIALOG_INSTALLED" != *"installed"* ]]; then
    sudo apt update
    sudo apt install -y dialog
  fi
fi

# Bootstrap
if [ ! -f "$ONEPATH/.pghome" ]; then
  curl -fsSL https://raw.githubusercontent.com/mawinkler/playground-one/main/bin/bootstrap.sh -o /tmp/bootstrap.sh
  . /tmp/bootstrap.sh ${CURRENT_PATH}

  exit 0
fi

function lock() {

  touch ${ONEPATH}/.pgo.$1.lock
}

function unlock() {

  rm -f ${ONEPATH}/.pgo.$1.lock
}

function checklock() {

  if [[ -f ${ONEPATH}/.pgo.$1.lock ]] ; then
    return
  fi
  false
}

function check_xdr_for_containers() {

  # Checking if XDR for Containers is deployed
  cd ${ONEPATH}/awsone/2-network
  tf_state_vpc=$(terraform state list 2>/dev/null | grep "module.vpc.aws_vpc.vpc")
  if [[ ! -z "${tf_state_vpc}" ]] ; then
    vpc_id=$(terraform output -raw vpc_id)
    subnets_createdby=$(aws ec2 describe-subnets --region ${aws_region} | \
      jq -r --arg vpc_id "$vpc_id" '.Subnets[] |
        select(.VpcId==$vpc_id) | .Tags[] | select(.Key=="CreatedBy") | .Value' | head -n1)
    if [ "${subnets_createdby}" == "VisionOneXdrForContainer" ] ; then
      printf '%s\n' "XDR for Containers is deployed in VPC ${vpc_id}"
      return
    else
      printf '%s\n' "XDR for Containers is NOT deployed in VPC ${vpc_id}"
    fi
  fi
  false
}

function check_network() {

  # Checking if XDR for Containers is deployed and update tfvars
  if check_xdr_for_containers ; then
    xdr_for_containers=true
  else
    xdr_for_containers=false
  fi
  aws_account_id=${aws_account_id} \
  aws_region=${aws_region} \
  aws_environment=${aws_environment} \
  pgo_access_ip=${pgo_access_ip} \
  xdr_for_containers=${xdr_for_containers} \
  ONEPATH=${ONEPATH} \
    envsubst <$ONEPATH/templates/terraform-2-network.tfvars >$ONEPATH/awsone/2-network/terraform.tfvars

  # Check locks
  if checklock ec2 ; then
    echo Destroy EC2 configuration first
    exit 0
  fi
  if checklock eks-ec2 ; then
    echo Destroy EKS EC2 configuration first
    exit 0
  fi
  if checklock eks-fg ; then
    echo Destroy EKS Fargate configuration first
    exit 0
  fi
  if checklock ecs ; then
    echo Destroy ECS configuration first
    exit 0
  fi
}

#######################################
# Initializes Terraform and creates
# variables.tfvars
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function init() {

  telemetry "init" $1

  case $1 in
    nw|network|all)
      printf '%s\n' "Create terraform.tfvars for network"
      if check_xdr_for_containers ; then
        xdr_for_containers=true
      else
        xdr_for_containers=false
      fi
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip} \
      xdr_for_containers=${xdr_for_containers} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-2-network.tfvars >$ONEPATH/awsone/2-network/terraform.tfvars
      
      cd ${ONEPATH}/awsone/2-network
      terraform init
      ;;&
    ec2|instances|all)
      printf '%s\n' "Create terraform.tfvars for instances"
      aws_region=${aws_region} \
      pgo_access_ip=${pgo_access_ip} \
      aws_environment=${aws_environment} \
      pgo_ec2_create_linux=${pgo_ec2_create_linux} \
      pgo_ec2_create_windows=${pgo_ec2_create_windows} \
      pgo_ec2_create_database=${pgo_ec2_create_database} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-3-instances.tfvars >$ONEPATH/awsone/3-instances/terraform.tfvars

      cd ${ONEPATH}/awsone/3-instances
      terraform init
      ;;&
    eks|eks-ec2|all)
      printf '%s\n' "Create terraform.tfvars for cluster-eks-ec2"
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip} \
      pgo_eks_create_ec2=${pgo_eks_create_ec2} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-4-cluster-eks-ec2.tfvars >$ONEPATH/awsone/4-cluster-eks-ec2/terraform.tfvars
      printf '%s\n' "Create terraform.tfvars for cluster-eks deployments"
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip//[\[\]\" ]/} \
      vision_one_cs_enabled=${vision_one_cs_enabled} \
      vision_one_cs_policy=${vision_one_cs_policy} \
      vision_one_api_key=${vision_one_api_key} \
      vision_one_region=${vision_one_region} \
      integrations_calico_enabled=${integrations_calico_enabled} \
      integrations_prometheus_enabled=${integrations_prometheus_enabled} \
      integrations_prometheus_grafana_password=${integrations_prometheus_grafana_password} \
      integrations_trivy_enabled=${integrations_trivy_enabled} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-8-cluster-eks-ec2-deployments.tfvars >$ONEPATH/awsone/8-cluster-eks-ec2-deployments/terraform.tfvars

      cd ${ONEPATH}/awsone/4-cluster-eks-ec2
      terraform init
      cd ${ONEPATH}/awsone/8-cluster-eks-ec2-deployments
      terraform init
      ;;&
    eks-fg|all)
      printf '%s\n' "Create terraform.tfvars for cluster-eks-fargate"
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip} \
      pgo_eks_create_ec2=${pgo_eks_create_ec2} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-4-cluster-eks-fargate.tfvars >$ONEPATH/awsone/4-cluster-eks-fargate/terraform.tfvars
      printf '%s\n' "Create terraform.tfvars for cluster-eks deployments"
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip//[\[\]\" ]/} \
      vision_one_cs_enabled=${vision_one_cs_enabled} \
      vision_one_cs_policy=${vision_one_cs_policy} \
      vision_one_api_key=${vision_one_api_key} \
      vision_one_region=${vision_one_region} \
      integrations_calico_enabled=${integrations_calico_enabled} \
      integrations_prometheus_enabled=${integrations_prometheus_enabled} \
      integrations_prometheus_grafana_password=${integrations_prometheus_grafana_password} \
      integrations_trivy_enabled=${integrations_trivy_enabled} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-8-cluster-eks-fargate-deployments.tfvars >$ONEPATH/awsone/8-cluster-eks-fargate-deployments/terraform.tfvars

      cd ${ONEPATH}/awsone/4-cluster-eks-fargate
      terraform init
      cd ${ONEPATH}/awsone/8-cluster-eks-fargate-deployments
      terraform init
      ;;&
    aks|all)
      printf '%s\n' "Create terraform.tfvars for cluster-aks"
      azure_subscription_id=${azure_subscription_id} \
      azure_region=${azure_region} \
      azure_environment=${azure_environment} \
      pgo_access_ip=${pgo_access_ip} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-4-cluster-aks.tfvars >$ONEPATH/azone/4-cluster-aks/terraform.tfvars
      printf '%s\n' "Create terraform.tfvars for cluster-aks deployments"
      azure_subscription_id=${azure_subscription_id} \
      azure_environment=${azure_environment} \
      pgo_access_ip=${pgo_access_ip//[\[\]\" ]/} \
      vision_one_cs_enabled=${vision_one_cs_enabled} \
      vision_one_cs_policy=${vision_one_cs_policy} \
      vision_one_api_key=${vision_one_api_key} \
      vision_one_region=${vision_one_region} \
      integrations_calico_enabled=${integrations_calico_enabled} \
      integrations_prometheus_enabled=${integrations_prometheus_enabled} \
      integrations_prometheus_grafana_password=${integrations_prometheus_grafana_password} \
      integrations_trivy_enabled=${integrations_trivy_enabled} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-8-cluster-aks-deployments.tfvars >$ONEPATH/azone/8-cluster-aks-deployments/terraform.tfvars

      cd ${ONEPATH}/azone/4-cluster-aks
      terraform init
      cd ${ONEPATH}/azone/8-cluster-aks-deployments
      terraform init
      ;;&
    ecs|all)
      printf '%s\n' "Create terraform.tfvars for cluster-ecs"
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip} \
      pgo_ecs_create_ec2=${pgo_ecs_create_ec2} \
      pgo_ecs_create_fargate=${pgo_ecs_create_fargate} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-5-cluster-ecs.tfvars >$ONEPATH/awsone/5-cluster-ecs/terraform.tfvars

      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform init
      ;;&
    scenarios|scenarios-ec2|all)
      printf '%s\n' "Create terraform.tfvars for scenarios-ec2 deployments"
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip//[\[\]\" ]/} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-7-scenarios-ec2.tfvars >$ONEPATH/awsone/7-scenarios-ec2/terraform.tfvars

      cd ${ONEPATH}/awsone/7-scenarios-ec2
      terraform init
      ;;&
    scenarios-fg|all)
      printf '%s\n' "Create terraform.tfvars for scenarios-fg deployments"
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip//[\[\]\" ]/} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-7-scenarios-fargate.tfvars >$ONEPATH/awsone/7-scenarios-fargate/terraform.tfvars

      cd ${ONEPATH}/awsone/7-scenarios-fargate
      terraform init
      ;;&
    scenarios-aks|all)
      printf '%s\n' "Create terraform.tfvars for scenarios-aks deployments"
      azure_subscription_id=${azure_subscription_id} \
      azure_environment=${azure_environment} \
      pgo_access_ip=${pgo_access_ip//[\[\]\" ]/} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-7-scenarios-aks.tfvars >$ONEPATH/azone/7-scenarios-aks/terraform.tfvars

      cd ${ONEPATH}/azone/7-scenarios-aks
      terraform init
      ;;&
    dsm|deepsecurity|all)
      printf '%s\n' "Create terraform.tfvars for deep security"
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip} \
      deep_security_license=${deep_security_license} \
      deep_security_username=${deep_security_username} \
      deep_security_password=${deep_security_password} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-9-deep-security.tfvars >$ONEPATH/awsone/9-deep-security/terraform.tfvars

      cd ${ONEPATH}/awsone/9-deep-security
      terraform init
      ;;&
    dsw|all)
      printf '%s\n' "Create terraform.tfvars for deep security workload"
      aws_account_id=${aws_account_id} \
      aws_region=${aws_region} \
      aws_environment=${aws_environment} \
      pgo_access_ip=${pgo_access_ip} \
      deep_security_license=${deep_security_license} \
      deep_security_username=${deep_security_username} \
      deep_security_password=${deep_security_password} \
      pgo_ec2_create_linux=${pgo_ec2_create_linux} \
      pgo_ec2_create_windows=${pgo_ec2_create_windows} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-9-deep-security-workload.tfvars >$ONEPATH/awsone/9-deep-security-workload/terraform.tfvars

      cd ${ONEPATH}/awsone/9-deep-security-workload
      terraform init
      ;;&
    kind|all)
      printf '%s\n' "Create terraform.tfvars for cluster-kind"
      aws_environment=${aws_environment} \
      ONEPATH=${ONEPATH} \
        envsubst <$ONEPATH/templates/terraform-6-cluster-kind.tfvars >$ONEPATH/awsone/6-cluster-kind/terraform.tfvars

      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform init
      ;;
  esac
  printf '%s\n' "💬 Terraform terraform.tfvars dropped to configurations"
}

#######################################
# Applies a Terraform configuration
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function apply() {

  telemetry "apply" $1

  case $1 in
    nw|network|all)
      check_network
      lock nw
      cd ${ONEPATH}/awsone/2-network
      terraform apply -auto-approve
      ;;&
    ec2|instances|all)
      lock ec2
      cd ${ONEPATH}/awsone/3-instances
      terraform apply -auto-approve
      printf '%s\n' "public_instance_password_srv1 = \"$(terraform output -raw public_instance_password_srv1)\""
      ;;&
    eks|eks-ec2|all)
      lock eks-ec2
      cd ${ONEPATH}/awsone/4-cluster-eks-ec2
      terraform apply -auto-approve
      $(terraform output -raw update_local_context_command)
      cd ${ONEPATH}/awsone/8-cluster-eks-ec2-deployments
      terraform apply -auto-approve
      ;;&
    eks-fg|all)
      lock eks-fg
      cd ${ONEPATH}/awsone/4-cluster-eks-fargate
      terraform apply -auto-approve
      $(terraform output -raw update_local_context_command)
      cd ${ONEPATH}/awsone/8-cluster-eks-fargate-deployments
      terraform apply -auto-approve
      ;;&
    aks|all)
      lock aks
      cd ${ONEPATH}/azone/4-cluster-aks
      terraform apply -auto-approve
      # $(terraform output -raw update_local_context_command)
      KUBECONFIG=~/.kube/config:$ONEPATH/azone/4-cluster-aks/kubeconfig \
        kubectl config view --flatten > /tmp/config && \
        mv /tmp/config ~/.kube/config
      kubectl config use-context $(terraform output -raw cluster_name)
      cd ${ONEPATH}/azone/8-cluster-aks-deployments
      terraform apply -auto-approve
      ;;&
    ecs|all)
      lock ecs
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform apply -auto-approve
      ;;&
    scenarios|scenarios-ec2|all)
      lock scenarios-ec2
      # make sure fargate namespace exists
      # kubectl create namespace fargate --dry-run=client -o yaml | kubectl apply -f -
      cd ${ONEPATH}/awsone/7-scenarios-ec2
      terraform apply -auto-approve
      ;;&
    scenarios-fg|all)
      lock scenarios-fg
      # make sure fargate namespace exists
      # kubectl create namespace fargate --dry-run=client -o yaml | kubectl apply -f -
      cd ${ONEPATH}/awsone/7-scenarios-fargate
      terraform apply -auto-approve
      ;;&
    scenarios-aks|all)
      lock scenarios-aks
      cd ${ONEPATH}/azone/7-scenarios-aks
      terraform apply -auto-approve
      ;;&
    dsm|deepsecurity|all)
      lock dsm
      cd ${ONEPATH}/awsone/9-deep-security
      terraform apply -auto-approve
      ;;&
    dsw|all)
      cd ${ONEPATH}/awsone/9-deep-security-workload
      terraform apply -auto-approve
      printf '%s\n' "public_instance_password_windows1 = \"$(terraform output -raw public_instance_password_windows1)\""
      ;;
    kind)
      lock kind
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform apply -auto-approve
      ;;
  esac
}

#######################################
# Updates the Access IP(s)
# Globals:
#   ONEPATH
# Arguments:
#   None
# Outputs:
#   None
#######################################
function update_ip() {
  
  # key_desc="Access IPs/CIDRs"
  # read -p "${key_desc} [${pgo_access_ip}]: " TEMP
  # if [[ ! -z "${TEMP}" ]]; then
  #   pgo_access_ip=${TEMP}
  # fi
  # if [[ "${pgo_access_ip}" =~ ^\[\"[0-9\.\,\/\"[:space:]]+\"\]$ ]]; then
  #   target_val=${pgo_access_ip} \
  #     yq -i '.services.playground-one.access-ip = env(target_val)' ${ONEPATH}/config.yaml
  # else
  #   echo "Error: Invalid ${key_desc} input."
  #   exit 0
  # fi

  key_desc="Access IPs/CIDRs"
  pgo_access_ip=${pgo_access_ip//[\[\]\"]/}
  read -p "${key_desc} [${pgo_access_ip}]: " TEMP
  if [[ ! -z "${TEMP}" ]]; then
    pgo_access_ip=${TEMP}
  fi

  n='([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'
  m='([0-9]|[12][0-9]|3[012])'
  cidr_list='['
  for cidr in $(echo ${pgo_access_ip} | tr ',' ' ')
  do
    # Input matches "pub", query public IP
    if [[ "${cidr}" == "pub" ]]; then
      cidr=$(curl -s ifconfig.me && echo)'/32'
      printf 'Public IP/CIDR %s\n' "$cidr"
    fi
    # Input matches IP, append /0 or /32
    if [[ "${cidr}" =~ ^$n(\.$n){3}$ ]]; then
      [[ "${cidr}" == "0.0.0.0" ]] && cidr='0.0.0.0/0' || cidr=$cidr'/32'
    fi
    # Test for valid CIDR
    if [[ "${cidr}" =~ ^$n(\.$n){3}/$m$ ]]; then
      cidr_list=$cidr_list'"'$cidr'",'
    else
      printf 'Error: "%s" is not a valid CIDR\n' "$cidr"
      exit 0
    fi
  done
  pgo_access_ip=${cidr_list::-1}']'
  # CIDR list correct?
  if [[ "${pgo_access_ip}" =~ ^\[\"[0-9\.\,\/\"[:space:]]+\"\]$ ]]; then
    target_val=${pgo_access_ip} \
      yq -i '.services.playground-one.access-ip = env(target_val)' ${ONEPATH}/config.yaml
  else
    echo "Error: Invalid ${key_desc} input."
    exit 0
  fi

  init nw

  cd ${ONEPATH}/awsone/2-network
  terraform apply

  init eks-ec2
  if checklock eks-ec2 ; then
    apply eks-ec2
  fi
  init eks-fg
  if checklock eks-fg ; then
    apply eks-fg
  fi
  init aks
  if checklock aks ; then
    apply aks
  fi
  init ecs
  if checklock ecs ; then
    apply ecs
  fi
  init scenarios-ec2
  if checklock scenarios-ec2 ; then
    apply scenarios-ec2
  fi
  init scenarios-fg
  if checklock scenarios-fg ; then
    apply scenarios-fg
  fi
  init scenarios-aks
  if checklock scenarios-aks ; then
    apply scenarios-aks
  fi
  init dsm
  if checklock dsm ; then
    apply dsm
  fi
  # TODO: Add eks deployments
}

#######################################
# Deletes computers from Deep Security
# with Playground policy assigned
# Globals:
#   ONEPATH
# Arguments:
#   None
# Outputs:
#   None
#######################################
function deep_security_delete_computers() {

  cd ${ONEPATH}/awsone/9-deep-security-workload
  dsm_url=$(terraform output -raw dsm_url)
  api_key=$(terraform output -raw ds_apikey)
  linux_policy_id=$(terraform output -raw linux_policy_id)
  windows_policy_id=$(terraform output -raw windows_policy_id)
  computer_ids=$(curl --location -ks ${dsm_url}/api/computers/search \
    --header 'api-version: v1' \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json' \
    --header 'api-secret-key: '${api_key} \
    --data '{
      "searchCriteria": [
        {
          "fieldName": "policyID",
          "numericTest": "equal",
          "numericValue": "'${linux_policy_id}'"
        }
      ]
    }' | jq -r '.computers[].ID')
  for id in ${computer_ids}; do
    printf 'Deleting Computer with ID: %s\n' "${id}"
    curl --location -ks --request DELETE ${dsm_url}/api/computers/${id} \
      --header 'api-version: v1' \
      --header 'Content-Type: application/json' \
      --header 'Accept: application/json' \
      --header 'api-secret-key: '${api_key}
  done

  computer_ids=$(curl --location -ks ${dsm_url}/api/computers/search \
    --header 'api-version: v1' \
    --header 'Content-Type: application/json' \
    --header 'Accept: application/json' \
    --header 'api-secret-key: '${api_key} \
    --data '{
      "searchCriteria": [
        {
          "fieldName": "policyID",
          "numericTest": "equal",
          "numericValue": "'${windows_policy_id}'"
        }
      ]
    }' | jq -r '.computers[].ID')
  for id in ${computer_ids}; do
    printf 'Deleting Computer with ID: %s\n' "${id}"
    curl --location -ks --request DELETE ${dsm_url}/api/computers/${id} \
      --header 'api-version: v1' \
      --header 'Content-Type: application/json' \
      --header 'Accept: application/json' \
      --header 'api-secret-key: '${api_key}
  done
}

#######################################
# Destroys a Terraform configuration
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function destroy() {

  telemetry "destroy" $1

  case $1 in
    ec2|instances|all)
      if checklock eks-ec2 ; then
        cd ${ONEPATH}/awsone/3-instances
        terraform destroy -auto-approve
        unlock ec2
      else
        printf '%s\n' "Configuration ec2 is not applied"
      fi
      ;;&
    eks|eks-ec2|all)
      if checklock eks-ec2 ; then
        cd ${ONEPATH}/awsone/4-cluster-eks-ec2
        cluster_name=$(terraform output -raw cluster_name)
        kubectl config use-context ${cluster_name}
        cd ${ONEPATH}/awsone/8-cluster-eks-ec2-deployments
        terraform destroy -auto-approve
        cd ${ONEPATH}/awsone/7-scenarios-ec2
        terraform destroy -auto-approve
        unlock scenarios-ec2
        cd ${ONEPATH}/awsone/4-cluster-eks-ec2
        terraform destroy -auto-approve
        unlock eks-ec2
        kubectl config delete-context ${cluster_name}
      else
        printf '%s\n' "Configuration eks-ec2 is not applied"
      fi
      ;;&
    eks-fg|all)
      if checklock eks-fg ; then
        cd ${ONEPATH}/awsone/4-cluster-eks-fargate
        cluster_name=$(terraform output -raw cluster_name)
        kubectl config use-context ${cluster_name}
        cd ${ONEPATH}/awsone/8-cluster-eks-fargate-deployments
        terraform destroy -auto-approve
        cd ${ONEPATH}/awsone/7-scenarios-fargate
        terraform destroy -auto-approve
        unlock scenarios-fg
        cd ${ONEPATH}/awsone/4-cluster-eks-fargate
        terraform destroy -auto-approve
        unlock eks-fg
        kubectl config delete-context ${cluster_name}
      else
        printf '%s\n' "Configuration eks-fg is not applied"
      fi
      ;;&
    aks|all)
      if checklock aks ; then
        cd ${ONEPATH}/azone/4-cluster-aks
        cluster_name=$(terraform output -raw cluster_name)
        cluster_username=$(terraform output -raw cluster_username)
        kubectl config use-context ${cluster_name}
        cd ${ONEPATH}/azone/8-cluster-aks-deployments
        terraform destroy -auto-approve
        cd ${ONEPATH}/azone/7-scenarios-aks
        terraform destroy -auto-approve
        unlock scenarios-aks
        cd ${ONEPATH}/azone/4-cluster-aks
        terraform destroy -auto-approve
        unlock aks
        kubectl config delete-context ${cluster_name}
        kubectl config delete-cluster ${cluster_name}
        kubectl config delete-user ${cluster_username}
      else
        printf '%s\n' "Configuration aks is not applied"
      fi
      ;;&
    ecs|all)
      if checklock ecs ; then
        # Workaround for Terraform bug described in FAQ
        # Delete eventually existing autoscaling groups belonging to the ecs clusters
        asg_groups=$(aws autoscaling describe-auto-scaling-groups --region ${aws_region} | \
          jq -r --arg aws_environment "$aws_environment-ecs-" '.AutoScalingGroups[] | select(.AutoScalingGroupName | startswith($aws_environment)) | .AutoScalingGroupName')
        for group in ${asg_groups} ; do
          printf '%s\n' "Deleting auto scaling group ${group}"
          aws autoscaling delete-auto-scaling-group --auto-scaling-group-name ${group} --region ${aws_region} --force-delete
        done
        
        # Delete eventually existing trendmicro scout service before cluster destroy
        # ecs_fargate_cluster=$(aws ecs list-clusters | jq -r --arg aws_environment "$aws_environment-ecs-fargate" '.clusterArns[]' | sed 's:.*/::')
        # if [[ "${ecs_fargate_cluster}" != "" ]] ; then
        #   ecs_services=$(aws ecs list-services --cluster $ecs_fargate_cluster | \
        #     jq -r --arg aws_environment "$aws_environment-ecs-fargate" '.serviceArns[] | select(. | endswith($aws_environment) | not)' | sed 's:.*/::')
        # fi
        # for service in "${ecs_services}" ; do
        #   if [[ "${service}" != "" ]] ; then
        #     printf '%s\n' "Deleting Scout service ${service}"
        #     aws ecs delete-service --service ${service} --cluster ${ecs_fargate_cluster} --force
        #   fi
        # done

        cd ${ONEPATH}/awsone/5-cluster-ecs
        terraform destroy -auto-approve
        unlock ecs
      else
        printf '%s\n' "Configuration ecs is not applied"
      fi
      ;;&
    dsw|all)
      if checklock dsm ; then
        deep_security_delete_computers
        cd ${ONEPATH}/awsone/9-deep-security-workload
        terraform destroy -auto-approve
      else
        printf '%s\n' "Configuration dsw is not applied"
      fi
      ;;&
    dsm|deepsecurity|all)
      if checklock dsm ; then
        cd ${ONEPATH}/awsone/9-deep-security
        terraform destroy -auto-approve
        unlock dsm
      else
        printf '%s\n' "Configuration dsm is not applied"
      fi
      ;;&
    nw|network|all)
      if checklock nw ; then
        check_network
        cd ${ONEPATH}/awsone/2-network
        terraform destroy -auto-approve
        unlock nw
      else
        printf '%s\n' "Configuration nw is not applied"
      fi
      ;;
    scenarios|scenarios-ec2)
      cd ${ONEPATH}/awsone/7-scenarios-ec2
      terraform destroy -auto-approve
      unlock scenarios-ec2
      ;;
    scenarios-fg)
      cd ${ONEPATH}/awsone/7-scenarios-fargate
      terraform destroy -auto-approve
      unlock scenarios-fg
      ;;
    scenarios-aks)
      cd ${ONEPATH}/azone/7-scenarios-aks
      terraform destroy -auto-approve
      unlock scenarios-aks
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform destroy -auto-approve
      unlock kind
      ;;
  esac
}

#######################################
# Lists Terraform outputs
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function output() {

  telemetry "output" $1

  case $1 in
    nw|network|all)
      if checklock nw ; then
        cd ${ONEPATH}/awsone/2-network
        terraform output
      else
        printf '%s\n' "Configuration nw not applied"
      fi
      ;;&
    ec2|instances|all)
      if checklock ec2 ; then
        cd ${ONEPATH}/awsone/3-instances
        terraform output
        printf '%s\n' "public_instance_password_srv1 = \"$(terraform output -raw public_instance_password_srv1)\""
      else
        printf '%s\n' "Configuration ec2 not applied"
      fi
      ;;&
    eks|eks-ec2|all)
      if checklock eks-ec2 ; then
        cd ${ONEPATH}/awsone/4-cluster-eks-ec2
        terraform output
        cd ${ONEPATH}/awsone/8-cluster-eks-ec2-deployments
        terraform output
      else
        printf '%s\n' "Configuration eks-ec2 not applied"
      fi
      ;;&
    eks-fg|all)
      if checklock eks-fg ; then
        cd ${ONEPATH}/awsone/4-cluster-eks-fargate
        terraform output
      else
        printf '%s\n' "Configuration eks-fargate not applied"
      fi
      ;;&
    aks|all)
      if checklock aks ; then
        cd ${ONEPATH}/azone/4-cluster-aks
        terraform output
        cd ${ONEPATH}/azone/8-cluster-aks-deployments
        terraform output
      else
        printf '%s\n' "Configuration aks not applied"
      fi
      ;;&
    ecs|all)
      if checklock ecs ; then
        cd ${ONEPATH}/awsone/5-cluster-ecs
        terraform output
      else
        printf '%s\n' "Configuration ecs not applied"
      fi
      ;;&
    scenarios|scenarios-ec2|all)
      if checklock scenarios-ec2 ; then
        cd ${ONEPATH}/awsone/7-scenarios-ec2
        terraform output
      else
        printf '%s\n' "Configuration scenarios-ec2 not applied"
      fi
      ;;&
    scenarios-fg|all)
      if checklock scenarios-fg ; then
        cd ${ONEPATH}/awsone/7-scenarios-fargate
        terraform output
      else
        printf '%s\n' "Configuration scenarios-fg not applied"
      fi
      ;;&
    scenarios-aks|all)
      if checklock scenarios-aks ; then
        cd ${ONEPATH}/azone/7-scenarios-aks
        terraform output
      else
        printf '%s\n' "Configuration scenarios-aks not applied"
      fi
      ;;&
    dsm|deepsecurity|all)
      if checklock dsm ; then
        cd ${ONEPATH}/awsone/9-deep-security
        terraform output
      else
        printf '%s\n' "Configuration dsm not applied"
      fi
      ;;&
    dsw|all)
      if checklock dsm ; then
        cd ${ONEPATH}/awsone/9-deep-security-workload
        terraform output
      else
        printf '%s\n' "Configuration dsm not applied"
      fi
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform output
      ;;
  esac
}

#######################################
# Lists applied Terraform configurations
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function list() {

  telemetry "list"

  if checklock nw ; then
    printf '%s\n' "Configuration nw is applied"
  fi
  if checklock ec2 ; then
    printf '%s\n' "Configuration ec2 is applied"
  fi
  if checklock eks-ec2 ; then
    printf '%s\n' "Configuration eks-ec2 is applied"
  fi
  if checklock eks-fg ; then
    printf '%s\n' "Configuration eks-fargate is applied"
  fi
  if checklock aks ; then
    printf '%s\n' "Configuration aks is applied"
  fi
  if checklock ecs ; then
    printf '%s\n' "Configuration ecs is applied"
  fi
  if checklock scenarios-ec2 ; then
    printf '%s\n' "Configuration scenarios-ec2 is applied"
  fi
  if checklock scenarios-fg ; then
    printf '%s\n' "Configuration scenarios-fg is applied"
  fi
  if checklock scenarios-aks ; then
    printf '%s\n' "Configuration scenarios-aks is applied"
  fi
  if checklock dsm ; then
    printf '%s\n' "Configuration dsm is applied"
  fi
}

#######################################
# Shows a Terraform configuration state
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function state() {

  telemetry "state" $1

  case $1 in
    nw|network|all)
      cd ${ONEPATH}/awsone/2-network
      terraform state list
      ;;&
    ec2|instances|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform state list
      ;;&
    eks|eks-ec2|all)
      cd ${ONEPATH}/awsone/4-cluster-eks-ec2
      terraform state list
      cd ${ONEPATH}/awsone/8-cluster-eks-ec2-deployments
      terraform state list
      ;;&
    eks-fg|all)
      cd ${ONEPATH}/awsone/4-cluster-eks-fargate
      terraform state list
      ;;&
    aks|all)
      cd ${ONEPATH}/azone/4-cluster-aks
      terraform state list
      cd ${ONEPATH}/azone/8-cluster-aks-deployments
      terraform state list
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform state list
      ;;&
    scenarios|scenarios-ec2|all)
      cd ${ONEPATH}/awsone/7-scenarios-ec2
      terraform state list
      ;;&
    scenarios-fg|all)
      cd ${ONEPATH}/awsone/7-scenarios-fargate
      terraform state list
      ;;&
    scenarios-aks|all)
      cd ${ONEPATH}/azone/7-scenarios-aks
      terraform state list
      ;;&
    dsm|deepsecurity|all)
      cd ${ONEPATH}/awsone/9-deep-security
      terraform state list
      ;;&
    dsw|all)
      cd ${ONEPATH}/awsone/9-deep-security-workload
      terraform state list
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform state list
      ;;
  esac
}

#######################################
# Shows a Terraform configuration full
# state
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function show() {

  telemetry "show" $1

  case $1 in
    nw|network|all)
      cd ${ONEPATH}/awsone/2-network
      terraform show
      ;;&
    ec2|instances|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform show
      ;;&
    eks|eks-ec2|all)
      cd ${ONEPATH}/awsone/4-cluster-eks-ec2
      terraform show
      cd ${ONEPATH}/awsone/8-cluster-eks-ec2-deployments
      terraform show
      ;;&
    eks-fg|all)
      cd ${ONEPATH}/awsone/4-cluster-eks-fargate
      terraform show
      ;;&
    aks|all)
      cd ${ONEPATH}/azone/4-cluster-aks
      terraform show
      cd ${ONEPATH}/azone/8-cluster-aks-deployments
      terraform show
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform show
      ;;&
    scenarios|scenarios-ec2|all)
      cd ${ONEPATH}/awsone/7-scenarios-ec2
      terraform show
      ;;&
    scenarios-fg|all)
      cd ${ONEPATH}/awsone/7-scenarios-fargate
      terraform show
      ;;&
    scenarios-aks|all)
      cd ${ONEPATH}/azone/7-scenarios-aks
      terraform show
      ;;&
    dsm|deepsecurity|all)
      cd ${ONEPATH}/awsone/9-deep-security
      terraform show
      ;;&
    dsw|all)
      cd ${ONEPATH}/awsone/9-deep-security-workload
      terraform show
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform show
      ;;
  esac
}

#######################################
# Validates a Terraform configuration
# Globals:
#   ONEPATH
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function validate() {

  telemetry "validate" $1

  case $1 in
    nw|network|all)
      cd ${ONEPATH}/awsone/2-network
      terraform validate
      ;;&
    ec2|instances|all)
      cd ${ONEPATH}/awsone/3-instances
      terraform validate
      ;;&
    eks|eks-ec2|all)
      cd ${ONEPATH}/awsone/4-cluster-eks-ec2
      terraform validate
      cd ${ONEPATH}/awsone/8-cluster-eks-ec2-deployments
      terraform validate
      ;;&
    eks-fg|all)
      cd ${ONEPATH}/awsone/4-cluster-eks-fargate
      terraform validate
      ;;&
    aks|all)
      cd ${ONEPATH}/azone/4-cluster-aks
      terraform validate
      cd ${ONEPATH}/azone/8-cluster-aks-deployments
      terraform validate
      ;;&
    ecs|all)
      cd ${ONEPATH}/awsone/5-cluster-ecs
      terraform validate
      ;;&
    scenarios|scenarios-ec2|all)
      cd ${ONEPATH}/awsone/7-scenarios-ec2
      terraform validate
      ;;&
    scenarios-fg|all)
      cd ${ONEPATH}/awsone/7-scenarios-fargate
      terraform validate
      ;;&
    scenarios-aks|all)
      cd ${ONEPATH}/azone/7-scenarios-aks
      terraform validate
      ;;&
    dsm|deepsecurity|all)
      cd ${ONEPATH}/awsone/9-deep-security
      terraform validate
      ;;&
    dsw|all)
      cd ${ONEPATH}/awsone/9-deep-security-workload
      terraform validate
      ;;
    kind)
      cd ${ONEPATH}/awsone/6-cluster-kind
      terraform validate
      ;;
  esac
}

#######################################
# Controls Colima on Darwin
# Globals:
#   None
# Arguments:
#   enable|disable
# Outputs:
#   None
#######################################
function colima-service() {

  telemetry "colima-service" $1

  case $1 in
    enable|true)
      # brew services start colima
      colima start
      ;;
    disable|false)
      # brew services stop colima
      colima stop
      ;;
  esac
}

#######################################
# Cleanup Terraform state and modules
# Globals:
#   None
# Arguments:
#   Configuration name or all
# Outputs:
#   None
#######################################
function erase() {

  telemetry "cleanup" $1

  case $1 in
    nw|network|all)
      if ! checklock nw; then
        cd ${ONEPATH}/awsone/2-network
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    ec2|instances|all)
      if ! checklock ec2; then
        cd ${ONEPATH}/awsone/3-instances
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    eks|eks-ec2|all)
      if ! checklock eks-ec2; then
        cd ${ONEPATH}/awsone/4-cluster-eks-ec2
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
        cd ${ONEPATH}/awsone/8-cluster-eks-ec2-deployments
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    eks-fg|all)
      if ! checklock eks-fg; then
        cd ${ONEPATH}/awsone/4-cluster-eks-fargate
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
        cd ${ONEPATH}/awsone/8-cluster-eks-fargate-deployments
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    aks|all)
      if ! checklock aks; then
        cd ${ONEPATH}/azone/4-cluster-aks
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
        cd ${ONEPATH}/azone/8-cluster-aks-deployments
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    ecs|all)
      if ! checklock ecs; then
        cd ${ONEPATH}/awsone/5-cluster-ecs
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    scenarios|scenarios-ec2|all)
      if ! checklock scenarios-ec2; then
        cd ${ONEPATH}/awsone/7-scenarios-ec2
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    scenarios-fg|all)
      if ! checklock scenarios-fg; then
        cd ${ONEPATH}/awsone/7-scenarios-fargate
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    scenarios-aks|all)
      if ! checklock scenarios-aks; then
        cd ${ONEPATH}/azone/7-scenarios-aks
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    dsm|deepsecurity|all)
      if ! checklock dsm; then
        cd ${ONEPATH}/awsone/9-deep-security
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    dsw|all)
      if ! checklock dsm; then
        cd ${ONEPATH}/awsone/9-deep-security-workload
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;&
    kind|all)
      if ! checklock kind; then
        cd ${ONEPATH}/awsone/6-cluster-kind
        rm -rf .terraform
        rm -f .terraform.lock.hcl
        rm -f terraform.tfstate*
      fi
      ;;
  esac
}

function helpcmd() {

  printf '%s\n' "Usage: pgo -<command> <configuration> ..."
  printf '%s\n' ""
  printf '%s\n' "The available commands for execution are listed below."
  printf '%s\n' "The primary workflow commands are given first, followed by"
  printf '%s\n' "less common or more advanced commands."
  printf '%s\n' ""
  printf '%s\n' "Available configurations: vpc, nw, ec2, eks-ec2, eks-fg, ecs, scenarios-ec2, scenarios-fg"
  printf '%s\n' ""
  printf '%s\n' "Main commands:"
  printf '%s\n' "  -c --config   Set/update Playground One main configuration"
  printf '%s\n' "  -i --init     Prepare a configuration for other commands"
  printf '%s\n' "  -a --apply    Create or update a configuration"
  printf '%s\n' "  -l --list     List applied configurations"
  printf '%s\n' "  -d --destroy  Destroy previously-created configuration"
  printf '%s\n' "  -o --output   Show output values"
  printf '%s\n' "  -s --state    Show the current state"
  printf '%s\n' "  -E --erase    Cleanup Terraform state and modules"
  printf '%s\n' "  -h --help     Show this help"
  printf '%s\n' ""
  printf '%s\n' "Other commands:"
  printf '%s\n' "  -S --show     Show advanced state"
  printf '%s\n' "  -u --updateip Update access IP(s)"
  printf '%s\n' "  -v --validate Check whether the configuration is valid"
  printf '%s\n' ""
  printf '%s\n' "Available configurations:"
  printf '%s\n' "  nw            Network configuration"
  printf '%s\n' "  ec2           EC2 configuration"
  printf '%s\n' "  eks-ec2       EKS configuration"
  printf '%s\n' "  eks-fg        EKS configuration"
  printf '%s\n' "  aks           AKS configuration"
  printf '%s\n' "  ecs           ECS configurations"
  printf '%s\n' "  kind          Kind configuration"
  printf '%s\n' "  scenarios-ec2 Scenario configuration"
  printf '%s\n' "  scenarios-fg  Scenario configuration"
  printf '%s\n' "  scenarios-aks  Scenario configuration"
  printf '%s\n' "  dsm           Deep Security configuration"
  printf '%s\n' "  dsw           Deep Security Workload configuration"
  printf '%s\n' "  all           All configurations"
  printf '%s\n' ""
  printf '%s\n' "Examples:"
  printf '%s\n' "  pgo --apply nw"
  printf '%s\n' "  pgo --state all"
}

#######################################
# Main:
# Manages a AWS based V1 & C1
# demo environment
#######################################
[ -z "$1" ] && helpcmd

if [ -f ${ONEPATH}/config.yaml ]; then
  get_config
fi

if is_darwin; then
  TEMP=$(/opt/homebrew/opt/gnu-getopt/bin/getopt -o ci:a:ld:o:s:S:v:uhC: --long config,init:,apply:,list,destroy:,output:,state:,show:,validate:,updateip,help,colima: -- "$@")
  if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

  eval set -- "$TEMP"
else
  TEMP=$(getopt -o ci:a:ld:o:s:S:v:uhE: --long config,init:,apply:,list,destroy:,output:,state:,show:,validate:,updateip,help,erase: -- "$@")
  if [ $? != 0 ] ; then echo "Terminating..." >&2 ; exit 1 ; fi

  eval set -- "$TEMP"
fi
# # Check if IP address changed
# configured_cidr=${pgo_access_ip//[\[\]\"]/}
# current_cidr=$(curl -s ifconfig.me && echo)'/32'
# if [[ ${configured_cidr} != *"$current_cidr"* ]] ; then
#   printf '%s\n' "!!! Access IP mismatch !!!"
#   sleep 3
#   exit 0
# fi

while true; do
  case "$1" in
    -c | --config ) pgo-configure; break ;;
    -i | --init ) init $2; shift 2 ;;
    -a | --apply ) apply $2; shift 2 ;;
    -l | --list ) list; break ;;
    -d | --destroy ) destroy $2; shift 2 ;;
    -o | --output ) output $2; shift 2 ;;
    -s | --state ) state $2; shift 2 ;;
    -S | --show ) show $2; shift 2 ;;
    -v | --validate ) validate $2; shift 2 ;;
    -u | --updateip ) update_ip; break ;;
    -h | --help ) helpcmd; break ;;
    -C | --colima ) colima-service $2; shift 2 ;;
    -E | --erase ) erase $2; shift 2 ;;
    -- ) shift; break ;;
    * ) break ;;
  esac
done
