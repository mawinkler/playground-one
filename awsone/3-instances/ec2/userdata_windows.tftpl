<powershell>
Start-Transcript -Path 'C:/userdata.log'

$logfilepath="C:\agent.log"
$fqdn="$env:computername"
$port_winrm=5986 
$port_ssh=22
$username = '${windows_username}'
$password = ConvertTo-SecureString '${windows_password}' -AsPlainText -Force 

Set-ExecutionPolicy -ExecutionPolicy Unrestricted -Scope CurrentUser -Force -ErrorAction Ignore
$ErrorActionPreference = "stop"


function Write-Log {
    param(
        [Parameter(Mandatory = $true)][string] $message,
        [Parameter(Mandatory = $false)]
        [ValidateSet("INFO","WARN","ERROR")]
        [string] $level = "INFO"
    )
    # Create timestamp
    $timestamp = (Get-Date).toString("yyyy/MM/dd HH:mm:ss")
    # Append content to log file
    Add-Content -Path $logfilepath -Value "$timestamp [$level] - $message"
}

${userdata_windows_winrm}
${userdata_windows_ssh}
${userdata_windows_aws}
${userdata_windows_join_ad}

function Create-LocalAdmin {
    process {
        try {
            # Create new local user
            New-LocalUser "$username" -Password $password -FullName "$username" -Description "local admin" -ErrorAction stop
            Write-Log -message "$username local user created"

            # Add user to administrator group
            Add-LocalGroupMember -Group "Administrators" -Member "$username" -ErrorAction stop
            Write-Log -message "$username added to the Administrators group"

        } catch{ Write-log -message $_.Exception.message -level "ERROR"}
    }    
}


# Create local admin user
Create-LocalAdmin 

if ("${windows_ad_domain_name}" -ne "") {
    $hostname = hostname
    if ("$hostname" -ne "${windows_hostname}") {
        Write-Log -message "Changing Hostname to ${windows_hostname}" -level "INFO"
        Rename-Computer -NewName ${windows_hostname} -Force -Restart
    } else {
        Write-Log -message "Hostname: $hostname" -level "INFO"
    }
} else {
    Write-Log -message "Not chaning host name" -level "INFO"
}

# Configure WinRM service
Configure-WinRMService

# Configure WinRM listener
Configure-WinRMHttpsListener

# Add Firewall rules
Add-FirewallRule-WinRM
Add-FirewallRule-SSH

# List the listeners
Write-Verbose -Verbose "Listing the WinRM listeners:"

Write-Verbose -Verbose "Querying WinRM listeners by running command: winrm enumerate winrm/config/listener"
winrm enumerate winrm/config/listener

# Add OpenSSH.Server
Configure-OpenSSHService

# Add AWS Tools
Configure-AWS-Tools

# ###########################
# Download from S3 bucket
# ###########################
$keyPrefix = "download"
$localFolder = "C:\Users\$username\Downloads"

# Get list of objects with the specified prefix
$objects = Get-S3Object -BucketName ${s3_bucket} -KeyPrefix $keyPrefix

# Iterate through each object and download it to the local folder
foreach ($obj in $objects) {
    # Remove the prefix from the object key to determine the local path
    $relativePath = $obj.Key.Substring($keyPrefix.Length)

    # Combine the local folder path with the relative object path
    $localPath = Join-Path $localFolder $relativePath

    # Ensure the directory structure exists
    $localDir = Split-Path $localPath -Parent
    if (-not (Test-Path $localDir)) {
        New-Item -ItemType Directory -Path $localDir
    }

    # Download the object
    Read-S3Object -BucketName ${s3_bucket} -Key $obj.Key -File $localPath
}

# ###########################
# Basecamp agent
# ###########################
# Moved to SSM Document
# Set-Location "$localFolder"

# if (!([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole] "Administrator")) {
#     Write-Warning "You are not running as an Administrator. Please try again with admin privileges."
#     exit 1
# }

# $archive="${tm_agent}_Windows.zip"

# if (Test-Path $archive) {

#     Write-Host "Extracting XBC/Basecamp Package" -ForegroundColor Green

#     Expand-Archive -LiteralPath $localFolder/$archive -DestinationPath $localFolder -Force

#     try {
#         Write-Host "Starting XBC/Basecamp Install Process" -ForegroundColor Green

#         Start-Process -FilePath $localFolder/EndpointBasecamp.exe -WorkingDirectory $localFolder -NoNewWindow

#         Write-Host "Install Process Completed" -ForegroundColor Green
#     }
#     catch {
#         # Catch errors if they exist.
#         throw $_.Exception.Message

#         Write-Host "The installer ran into an issue. Try running the installer manually to determine the casue." -ForegroundColor Red

#         exit 3
#     }
# }

# Join AD
if ("${windows_ad_domain_name}" -ne "") {
    Join-AD
} else {
    Write-Log -message "Not joining an Active Directory" -level "INFO"
}

Stop-Transcript
</powershell>
