<powershell>
Start-Transcript -Path 'C:/userdata.log'

$logfilepath="C:\agent.log"

Set-ExecutionPolicy unrestricted -Force

function Write-Log {
    param(
        [Parameter(Mandatory = $true)][string] $message,
        [Parameter(Mandatory = $false)]
        [ValidateSet("INFO","WARN","ERROR")]
        [string] $level = "INFO"
    )
    # Create timestamp
    $timestamp = (Get-Date).toString("yyyy/MM/dd HH:mm:ss")
    # Append content to log file
    Add-Content -Path $logfilepath -Value "$timestamp [$level] - $message"
}

net user Administrator "${windows_ad_safe_password}"

function Create-Domain-Forest {

    $Password = ConvertTo-SecureString "${windows_ad_safe_password}" -AsPlainText -Force;

    Add-WindowsFeature AD-Domain-Services -IncludeManagementTools
    Install-ADDSForest -CreateDnsDelegation:$false -DatabasePath C:\Windows\NTDS -DomainMode WinThreshold -DomainName ${windows_ad_domain_name} -DomainNetbiosName ${windows_ad_nebios_name} -ForestMode WinThreshold -InstallDns:$true -LogPath C:\Windows\NTDS -NoRebootOnCompletion:$true -SafeModeAdministratorPassword $Password -SysvolPath C:\Windows\SYSVOL -Force:$true;
    Write-Log -message "Domain Forest created"
    
    Restart-Computer -Force;    
}


# Define script path
$taskPath = "C:\continue_userdata.ps1"
$taskName = "ContinueUserData"

# Save only the "post-reboot" portion of the script
$scriptContent = @'
$logfilepath="C:\agent.log"
Set-ExecutionPolicy unrestricted -Force

function Write-Log {
    param(
        [Parameter(Mandatory = $true)][string] $message,
        [Parameter(Mandatory = $false)]
        [ValidateSet("INFO","WARN","ERROR")]
        [string] $level = "INFO"
    )
    # Create timestamp
    $timestamp = (Get-Date).toString("yyyy/MM/dd HH:mm:ss")
    # Append content to log file
    Add-Content -Path $logfilepath -Value "$timestamp [$level] - $message"
}

# Wait for network and domain services to start
Start-Sleep -Seconds 60

# Example: Install a program after reboot
Write-Log -message "Resuming User Data Execution..." -level "INFO"

${userdata_windows_winrm}

${userdata_windows_ssh}

${userdata_windows_aws}

New-NetFirewallRule -DisplayName "Allow LDAPS" -Direction Inbound -Protocol TCP -LocalPort 636 -Action Allow
Write-Log -message "Firewall opened for LDAPS on port 636" -level "INFO"

# GPO
$GpoName = "Enable Remote Management Firewall Rules"
$dn = ("${windows_ad_domain_name}" -split "\.") -join ",DC="
# $dn = "OU=Computers,DC=" + $dn
$dn = "DC=" + $dn
try {
    New-GPO -Name $GpoName | New-GPLink -Target "$dn"
} catch { Write-Log -message "Create GPO - "+ $_.Exception.message -level "ERROR"}

Write-Log -message "GPO created" -level "INFO"

$GpoName = "Enable Remote Management Firewall Rules"

# Enable Windows Remote Management (WinRM)
try {
    Set-GPRegistryValue -Name $GpoName -Key "HKLM\SOFTWARE\Policies\Microsoft\Windows\WinRM\Service" -ValueName "AllowAutoConfig" -Type DWord -Value 1
    Set-GPRegistryValue -Name $GpoName -Key "HKLM\SOFTWARE\Policies\Microsoft\Windows\WinRM\Service" -ValueName "AllowUnencryptedTraffic" -Type DWord -Value 1
} catch { Write-Log -message "Create GPO WinRM - "+ $_.Exception.message -level "ERROR"}

Write-Log -message "GPO WinRM enabled" -level "INFO"

try {
    # Enable necessary firewall rules
    $FirewallRules = @(
        "RemoteEventLogSvc-In-TCP",
        "RemoteEventLogSvc-RPCSS-In-TCP",
        "RemoteEventLogSvc-NP-In-TCP",
        "RemoteTask-In-TCP",
        "RemoteTask-RPCSS-In-TCP",
        "RemoteTask-NP-In-TCP",
        "RemoteService-In-TCP",
        "RemoteService-RPCSS-In-TCP",
        "RemoteService-NP-In-TCP",
        "WinRM-HTTP-In-TCP",
        "WinRM-HTTPS-In-TCP",
        "COM+ Remote Administration (DCOM-In)",
        "ADDS-LDAPSEC-TCP-In",
        "ADDS-LDAPGCSEC-TCP-In"
    )

    foreach ($rule in $FirewallRules) {
        Set-GPRegistryValue -Name $GpoName -Key "HKLM\SYSTEM\CurrentControlSet\Services\SharedAccess\Parameters\FirewallPolicy\FirewallRules" -ValueName $rule -Type String -Value "v2.31|Action=Allow|Active=TRUE"
        Write-Log -message "GPO Firewall " + $rule + " configured" -level "INFO"
    }
} catch { Write-Log -message "Create GPO Firewall - "+ $_.Exception.message -level "ERROR"}

Write-Log -message "GPO Firewall configured" -level "INFO"

# Define GPO Name
$GPOName = "Default Domain Policy"

# Define Policy Path
$PolicyPath = "HKLM\SOFTWARE\Policies\Microsoft\WindowsFirewall\DomainProfile"

# Ensure the GPO exists
if (-not (Get-GPO -Name $GPOName -ErrorAction SilentlyContinue)) {
    Write-Log -message "GPO '$GPOName' not found!" -level "ERROR"
    exit
}

# Enable Remote Administration Exception (Allow inbound remote admin)
Set-GPRegistryValue -Name $GPOName -Key "$PolicyPath" -ValueName "AllowRemoteAdmin" -Type DWord -Value 1

Write-Log -message "Windows Firewall: Allow inbound remote administration exception enabled in Default Domain Policy"  -level "INFO"

# Force GPO update
gpupdate /force

Write-Log -message "GPO update forced" -level "INFO"

# Remove Scheduled Task after it runs once
Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
'@

# Ensure directory exists and save script
$scriptContent | Set-Content -LiteralPath $taskPath -Force

# Create a Scheduled Task to run after reboot
$Action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-ExecutionPolicy Bypass -File $taskPath"
$Trigger = New-ScheduledTaskTrigger -AtStartup
$Settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries -DontStopOnIdleEnd
Register-ScheduledTask -TaskName $taskName -Action $Action -Trigger $Trigger -Settings $Settings -User "SYSTEM" -RunLevel Highest

# Create Domain Forest
Create-Domain-Forest

# Apply the GPO
#gpupdate /force

#Write-Log -message "GPO applied"

Stop-Transcript
</powershell>