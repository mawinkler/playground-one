<powershell>
Start-Transcript -Path 'C:/userdata.log'

$logfilepath="C:\agent.log"

$port_winrm=5986 
$port_ssh=22
$username = '${windows_username}'
$password = ConvertTo-SecureString '${windows_password}' -AsPlainText -Force 

Set-ExecutionPolicy unrestricted -Force

function Write-Log {
    param(
        [Parameter(Mandatory = $true)][string] $message,
        [Parameter(Mandatory = $false)]
        [ValidateSet("INFO","WARN","ERROR")]
        [string] $level = "INFO"
    )
    # Create timestamp
    $timestamp = (Get-Date).toString("yyyy/MM/dd HH:mm:ss")
    # Append content to log file
    Add-Content -Path $logfilepath -Value "$timestamp [$level] - $message"
}

function Create-LocalAdmin {
    process {
        try {

            try {
                Write-Log "Searching for $username in LocalUser DataBase"
                $ObjLocalUser = Get-LocalUser "$username"
                Write-Log -message "User $username was found" -level "INFO"
            }
            catch [Microsoft.PowerShell.Commands.UserNotFoundException] {
                Write-Log -message "User $username was not found" -level "INFO"
                # Create new local user
                New-LocalUser "$username" -Password $password -FullName "$username" -Description "local admin"
                # -ErrorAction stop
                Write-Log -message "$username local user created" -level "INFO"
                Add-LocalGroupMember -Group "Administrators" -Member "$username" 
                # -ErrorAction stop
                Write-Log -message "$username added to the Administrators group" -level "INFO"
            }
            catch {
                Write-Log -message "An unspecifed error occured" -level "ERROR"
                #Exit # Stop Powershell! 
            }

            #Create the user if it was not found (Example)
            #if (!$ObjLocalUser) {
            #    Write-Verbose "Creating User $($USERNAME)" #(Example)
            #    # ..... (Your Code Here)
            #}

            # Create new local user
            #New-LocalUser "$username" -Password $password -FullName "$username" -Description "local admin"
            # -ErrorAction stop
            #Write-Log -message "$username local user created"

            # Add user to administrator group
            #Add-LocalGroupMember -Group "Administrators" -Member "$username" 
            # -ErrorAction stop
            #Write-Log -message "$username added to the Administrators group"

        } catch{ Write-log -message $_.Exception.message -level "ERROR"}
    }    
}

function Configure-AWS-Tools {

    $ListofModulesInstalled = (Get-InstalledModule).Name
    Write-Log -message "Ckecking if AWS.Tools.Installer is installed on this instance."
    
    if ($ListofModulesInstalled -contains "AWS.Tools.Installer") { 
        Write-Log -message "AWS.Tools.Installer module exists."
    } else { 
        Write-Log -message "AWS.Tools.Installer module does not exist and needs to be installed."
        $ListofPackagesInstalled = (Get-PackageProvider -ListAvailable).Name
        Write-Log -message "AWS.Tools.Installer requires nuget package version 2.8.5.201 or above to be installed. Checking if correct version of nuget package is installed."
        if ($ListofPackagesInstalled -contains "Nuget")
        {
            Write-Log -message "Nuget package exists. Ckecking version."
            $CheckNugetVersion=(get-PackageProvider -Name NuGet).Version
            if($CheckNugetVersion -ge "2.8.5.201")
            {
                Write-Log -message "Nuget version is $CheckNugetVersion and that is acceptable."
            } else {
                Write-Log -message "Nuget version is $CheckNugetVersion and a newer package will be installed."
                Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
            }
        } else {
            Write-Log -message "Nugest package does not exists and will be installed."
            Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Force
        }
        Install-Module -Name AWS.Tools.Installer -Force
        Write-Log -message "AWS.Tools.Installer was installed successfully."
    }
}

# Create local admin user
Create-LocalAdmin

# Add AWS Tools
Configure-AWS-Tools

# ###########################
# Download from S3 bucket
# ###########################
$keyPrefix = "download"
$localFolder = "C:\Downloads"

New-Item -ItemType Directory -Force -Path $localFolder

# Get list of objects with the specified prefix
$objects = Get-S3Object -BucketName ${s3_bucket} -KeyPrefix $keyPrefix

# Iterate through each object and download it to the local folder
foreach ($obj in $objects) {
    # Remove the prefix from the object key to determine the local path
    $relativePath = $obj.Key.Substring($keyPrefix.Length)

    # Combine the local folder path with the relative object path
    $localPath = Join-Path $localFolder $relativePath

    # Ensure the directory structure exists
    $localDir = Split-Path $localPath -Parent
    if (-not (Test-Path $localDir)) {
        New-Item -ItemType Directory -Path $localDir
    }

    # Download the object
    Read-S3Object -BucketName ${s3_bucket} -Key $obj.Key -File $localPath
}

net user Administrator "${windows_ad_safe_password}"

$hostname = hostname
if ("$hostname" -ne "${windows_ad_hostname}") {
   Write-Log -message "Changing Hostname" -level "INFO"
   Rename-Computer -NewName ${windows_ad_hostname} -Force -Restart
} else {
   Write-Log -message "Hostname: $hostname" -level "INFO"
}

$domain = (Get-WmiObject win32_computersystem).Domain
$hostname = hostname
$domain_username = "${windows_ad_domain_name}\${windows_ad_user_name}"
$domain_password = ConvertTo-SecureString "${windows_ad_safe_password}" -AsPlainText -Force
$credential = New-Object System.Management.Automation.PSCredential($domain_username,$domain_password)
Write-Log -message "Administrator password set"

if ($domain -ne '${windows_ad_domain_name}' -And '${windows_ad_join}' -eq "true") {
  Write-Log -message "Joining domain in 30 seconds" -level "INFO"
  Start-Sleep -Seconds 30

  # Comment
  $Stoploop = $false
  [int]$Retrycount = "0"
    
  do {
    try {
      Add-Computer -DomainName ${windows_ad_domain_name} -Credential $credential -Passthru -Verbose -Force 
      # -Restart
      Write-Log -message "Domain join successful" -level "INFO"
      $Stoploop = $true
      Restart-Computer -Force;
    } catch {
      Write-log -message $_.Exception.message -level "ERROR"
      if ($Retrycount -gt 20) {
        Write-Log -message "Domain join failed after 20 retrys" -level "ERROR"
        $Stoploop = $true
      } else {
        Write-Log -message "Could not join domain, retrying in 60 seconds..." -level "WARN"
        Start-Sleep -Seconds 60
        $Retrycount = $Retrycount + 1
      }
    }
  } While ($Stoploop -eq $false)
}

Start-Sleep -Seconds 5

Stop-Transcript
</powershell>
<persist>true</persist>