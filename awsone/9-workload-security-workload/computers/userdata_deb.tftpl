#!/bin/bash

# install essential packages
apt-get update
# apt-get install -y unzip


PACKAGE="unzip"  # Package to install, passed as a script argument
RETRY_COUNT=10  # Number of retries
WAIT_TIME=10  # Wait time (seconds) between retries

echo "Attempting to install package: $PACKAGE"

for ((i=1; i<=RETRY_COUNT; i++)); do
    # Try to install the package
    if sudo apt-get install -y "$PACKAGE"; then
        echo "Package $PACKAGE installed successfully."
    else
        # Check if the error is related to the dpkg lock
        if grep -q "Unable to acquire the dpkg frontend lock" <(sudo apt-get install -y "$PACKAGE" 2>&1); then
            echo "Lock is held by another process. Retry $i/$RETRY_COUNT after $WAIT_TIME seconds..."
            sleep "$WAIT_TIME"
        else
            echo "Failed to install package $PACKAGE for another reason."
            exit 1
        fi
    fi
done

# install aws cli
curl -fsSL https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip -o /tmp/awscliv2.zip
unzip /tmp/awscliv2.zip -d /tmp
/tmp/aws/install --update
rm -Rf /tmp/aws /tmp/awscliv2.zip

# download from s3
mkdir -p /home/${linux_username_ubnt}/download
aws s3 cp s3://${s3_bucket}/download /home/${linux_username_ubnt}/download --recursive
chown ${linux_username_ubnt}.${linux_username_ubnt} -R /home/${linux_username_ubnt}/download

cat << EOF > /home/${linux_username_ubnt}/TMServerAgent_Linux_deploy.sh
#!/bin/bash

cd ~/download

archive=TMServerAgent_Linux.tar

/usr/local/bin/aws s3 cp s3://${s3_bucket}/download/\$archive ~/download/\$archive

if [ -f "\$archive" ]; then
    tar xf \$archive
    sudo ./tmxbc install
fi
EOF

chmod +x /home/${linux_username_ubnt}/TMServerAgent_Linux_deploy.sh
chown ${linux_username_ubnt}.${linux_username_ubnt} /home/${linux_username_ubnt}/TMServerAgent_Linux_deploy.sh

# Workload Security Agent
#!/bin/bash

ACTIVATIONURL="dsm://agents.workload.${ws_region}.cloudone.trendmicro.com:443/"
MANAGERURL="https://workload.${ws_region}.cloudone.trendmicro.com:443"
CURLOPTIONS='--silent --tlsv1.2'
linuxPlatform='';
isRPM='';

if [[ $(/usr/bin/id -u) -ne 0 ]]; then
    echo You are not running as the root user.  Please try again with root privileges.;
    logger -t You are not running as the root user.  Please try again with root privileges.;
    exit 1;
fi;

if ! type curl >/dev/null 2>&1; then
    echo "Please install CURL before running this script."
    logger -t Please install CURL before running this script
    exit 1
fi

CURLOUT=$(eval curl -L $MANAGERURL/software/deploymentscript/platform/linuxdetectscriptv1/ -o /tmp/PlatformDetection $CURLOPTIONS;)
err=$?
if [[ $err -eq 60 ]]; then
    echo "TLS certificate validation for the agent package download has failed. Please check that your Workload Security Manager TLS certificate is signed by a trusted root certificate authority. For more information, search for \"deployment scripts\" in the Deep Security Help Center."
    logger -t TLS certificate validation for the agent package download has failed. Please check that your Workload Security Manager TLS certificate is signed by a trusted root certificate authority. For more information, search for \"deployment scripts\" in the Deep Security Help Center.
    exit 1;
fi

if [ -s /tmp/PlatformDetection ]; then
    . /tmp/PlatformDetection
else
    echo "Failed to download the agent installation support script."
    logger -t Failed to download the Deep Security Agent installation support script
    exit 1
fi

platform_detect
if [[ -z "$linuxPlatform" ]] || [[ -z "$isRPM" ]]; then
    echo Unsupported platform is detected
    logger -t Unsupported platform is detected
    exit 1
fi

if [[ $linuxPlatform == *"SuSE_15"* ]]; then
    if ! type pidof &> /dev/null || ! type start_daemon &> /dev/null || ! type killproc &> /dev/null; then
        echo Please install sysvinit-tools before running this script
        logger -t Please install sysvinit-tools before running this script
        exit 1
    fi
fi

echo Downloading agent package...
if [[ $isRPM == 1 ]]; then package='agent.rpm'
    else package='agent.deb'
fi
curl -H "Agent-Version-Control: on" -L $MANAGERURL/software/agent/$runningPlatform$majorVersion/$archType/$package?tenantID=13416 -o /tmp/$package $CURLOPTIONS

echo Installing agent package...
rc=1
if [[ $isRPM == 1 && -s /tmp/agent.rpm ]]; then
    rpm -ihv /tmp/agent.rpm
    rc=$?
elif [[ -s /tmp/agent.deb ]]; then
    dpkg -i /tmp/agent.deb
    rc=$?
else
    echo Failed to download the agent package. Please make sure the package is imported in the Workload Security Manager
    logger -t Failed to download the agent package. Please make sure the package is imported in the Workload Security Manager
    exit 1
fi
if [[ $rc != 0 ]]; then
    echo Failed to install the agent package
    logger -t Failed to install the agent package
    exit 1
fi

echo Install the agent package successfully

sleep 15
/opt/ds_agent/dsa_control -r
/opt/ds_agent/dsa_control -a $ACTIVATIONURL "tenantID:${ws_tenant_id}" "token:${ws_token}" "policyid:${linux_policy_id}"
